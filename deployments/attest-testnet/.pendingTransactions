{
  "0xf69fe6f90c15fe868e3392e9d18c99f8f4acf78cd3dff7651c09d326b162f8ab": {
    "name": "SchemaRegistry",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "SchemaRegistry",
      "sourceName": "contracts/SchemaRegistry.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AlreadyExists",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "registerer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ],
              "indexed": false,
              "internalType": "struct SchemaRecord",
              "name": "schema",
              "type": "tuple"
            }
          ],
          "name": "Registered",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "name": "getSchema",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ],
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "name": "register",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x60e0604052348015600f57600080fd5b506001608052600360a052600060c05260805160a05160c051610ab561004b600039600060fe0152600060d50152600060ac0152610ab56000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b6100776100723660046106b2565b610148565b60405190815260200161005b565b610098610093366004610760565b61030c565b60405161005b9190610779565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107d2565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af908261093a565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610779565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610898565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610898565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610869565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a53565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b803580151581146106ad57600080fd5b919050565b600080600080606085870312156106c857600080fd5b843567ffffffffffffffff8111156106df57600080fd5b8501601f810187136106f057600080fd5b803567ffffffffffffffff81111561070757600080fd5b87602082840101111561071957600080fd5b60209182019550935085013573ffffffffffffffffffffffffffffffffffffffff8116811461074757600080fd5b91506107556040860161069d565b905092959194509250565b60006020828403121561077257600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107ca60a0840182610639565b949350505050565b600084516107e4818460208901610615565b7f2e00000000000000000000000000000000000000000000000000000000000000908301908152845161081e816001840160208901610615565b7f2e0000000000000000000000000000000000000000000000000000000000000060019290910191820152835161085c816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806108ac57607f821691505b6020821081036108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561093557806000526020600020601f840160051c810160208510156109125750805b601f840160051c820191505b81811015610932576000815560010161091e565b50505b505050565b815167ffffffffffffffff81111561095457610954610869565b610968816109628454610898565b846108eb565b6020601f8211600181146109ba57600083156109845750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455610932565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015610a0857878501518255602094850194600190920191016109e8565b5084821015610a4457868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60008451610a65818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c634300081a000a",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b6100776100723660046106b2565b610148565b60405190815260200161005b565b610098610093366004610760565b61030c565b60405161005b9190610779565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107d2565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af908261093a565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610779565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610898565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610898565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610869565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a53565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b803580151581146106ad57600080fd5b919050565b600080600080606085870312156106c857600080fd5b843567ffffffffffffffff8111156106df57600080fd5b8501601f810187136106f057600080fd5b803567ffffffffffffffff81111561070757600080fd5b87602082840101111561071957600080fd5b60209182019550935085013573ffffffffffffffffffffffffffffffffffffffff8116811461074757600080fd5b91506107556040860161069d565b905092959194509250565b60006020828403121561077257600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107ca60a0840182610639565b949350505050565b600084516107e4818460208901610615565b7f2e00000000000000000000000000000000000000000000000000000000000000908301908152845161081e816001840160208901610615565b7f2e0000000000000000000000000000000000000000000000000000000000000060019290910191820152835161085c816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806108ac57607f821691505b6020821081036108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561093557806000526020600020601f840160051c810160208510156109125750805b601f840160051c820191505b81811015610932576000815560010161091e565b50505b505050565b815167ffffffffffffffff81111561095457610954610869565b610968816109628454610898565b846108eb565b6020601f8211600181146109ba57600083156109845750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455610932565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015610a0857878501518255602094850194600190920191016109e8565b5084821015610a4457868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60008451610a65818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c634300081a000a",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "events": {
          "Registered(bytes32,address,(bytes32,address,bool,string))": {
            "params": {
              "registerer": "The address of the account used to register the schema.",
              "schema": "The schema data.",
              "uid": "The schema UID."
            }
          }
        },
        "kind": "dev",
        "methods": {
          "constructor": {
            "details": "Creates a new SchemaRegistry instance."
          },
          "getSchema(bytes32)": {
            "params": {
              "uid": "The UID of the schema to retrieve."
            },
            "returns": {
              "_0": "The schema data members."
            }
          },
          "register(string,address,bool)": {
            "params": {
              "resolver": "An optional schema resolver.",
              "revocable": "Whether the schema allows revocations explicitly.",
              "schema": "The schema data schema."
            },
            "returns": {
              "_0": "The UID of the new schema."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "title": "SchemaRegistry",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_7012": {
              "entryPoint": null,
              "id": 7012,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_7149": {
              "entryPoint": null,
              "id": 7149,
              "parameterSlots": 3,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "60e0604052348015600f57600080fd5b506001608052600360a052600060c05260805160a05160c051610ab561004b600039600060fe0152600060d50152600060ac0152610ab56000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b6100776100723660046106b2565b610148565b60405190815260200161005b565b610098610093366004610760565b61030c565b60405161005b9190610779565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107d2565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af908261093a565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610779565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610898565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610898565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610869565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a53565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b803580151581146106ad57600080fd5b919050565b600080600080606085870312156106c857600080fd5b843567ffffffffffffffff8111156106df57600080fd5b8501601f810187136106f057600080fd5b803567ffffffffffffffff81111561070757600080fd5b87602082840101111561071957600080fd5b60209182019550935085013573ffffffffffffffffffffffffffffffffffffffff8116811461074757600080fd5b91506107556040860161069d565b905092959194509250565b60006020828403121561077257600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107ca60a0840182610639565b949350505050565b600084516107e4818460208901610615565b7f2e00000000000000000000000000000000000000000000000000000000000000908301908152845161081e816001840160208901610615565b7f2e0000000000000000000000000000000000000000000000000000000000000060019290910191820152835161085c816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806108ac57607f821691505b6020821081036108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561093557806000526020600020601f840160051c810160208510156109125750805b601f840160051c820191505b81811015610932576000815560010161091e565b50505b505050565b815167ffffffffffffffff81111561095457610954610869565b610968816109628454610898565b846108eb565b6020601f8211600181146109ba57600083156109845750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455610932565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015610a0857878501518255602094850194600190920191016109e8565b5084821015610a4457868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60008451610a65818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c634300081a000a",
          "opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x80 MSTORE PUSH1 0x3 PUSH1 0xA0 MSTORE PUSH1 0x0 PUSH1 0xC0 MSTORE PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0xAB5 PUSH2 0x4B PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH1 0xFE ADD MSTORE PUSH1 0x0 PUSH1 0xD5 ADD MSTORE PUSH1 0x0 PUSH1 0xAC ADD MSTORE PUSH2 0xAB5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x60D7A278 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xA2EA7C6E EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x683 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5B JUMP JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD0 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH2 0xF9 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x122 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x134 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP4 POP SWAP2 POP PUSH2 0x1CA SWAP1 POP DUP3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x213 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23369FA600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP4 DUP7 ADD MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 SWAP1 SWAP5 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP4 SWAP2 SWAP1 PUSH1 0x2 DUP3 ADD SWAP1 PUSH2 0x2AF SWAP1 DUP3 PUSH2 0x93A JUMP JUMPDEST POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xD0B86852E21F9E5FA4BC3B0CFF9757FFE243D50C4B43968A42202153D651EA5E DUP5 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 PUSH2 0x3AB SWAP1 PUSH2 0x898 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D7 SWAP1 PUSH2 0x898 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x424 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x424 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x407 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x441 DUP4 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x461 JUMPI PUSH2 0x461 PUSH2 0x869 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x48B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x495 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x515 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x57B JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x5A7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x5C5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x5DD JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x5F1 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x603 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x60F JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x630 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x618 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x651 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x615 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x696 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x639 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x707 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP6 POP SWAP4 POP DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH2 0x755 PUSH1 0x40 DUP7 ADD PUSH2 0x69D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP1 DUP5 ADD MSTORE PUSH2 0x7CA PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x639 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x7E4 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP5 MLOAD PUSH2 0x81E DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x85C DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x615 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x8AC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8E5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x935 JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x912 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x91E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x954 JUMPI PUSH2 0x954 PUSH2 0x869 JUMP JUMPDEST PUSH2 0x968 DUP2 PUSH2 0x962 DUP5 SLOAD PUSH2 0x898 JUMP JUMPDEST DUP5 PUSH2 0x8EB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x9BA JUMPI PUSH1 0x0 DUP4 ISZERO PUSH2 0x984 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x932 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA08 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9E8 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xA44 JUMPI DUP7 DUP5 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xA65 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH1 0x60 SWAP5 SWAP1 SWAP5 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP2 SWAP1 SWAP4 ADD SWAP1 DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x15 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ",
          "sourceMap": "344:1436:26:-:0;;;619:32;;;;;;;;;-1:-1:-1;640:1:26;759:14:27;;643:1:26;783:14:27;;646:1:26;807:14:27;;344:1436:26;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_getUID_7110": {
              "entryPoint": 1266,
              "id": 7110,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getSchema_7088": {
              "entryPoint": 780,
              "id": 7088,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@log10_3757": {
              "entryPoint": 1330,
              "id": 3757,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@register_7074": {
              "entryPoint": 328,
              "id": 7074,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@toString_1946": {
              "entryPoint": 1076,
              "id": 1946,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@version_7177": {
              "entryPoint": 165,
              "id": 7177,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_bool": {
              "entryPoint": 1693,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": 1888,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_calldata_ptrt_contract$_ISchemaResolver_$8608t_bool": {
              "entryPoint": 1714,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_string": {
              "entryPoint": 1593,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_memory_ptr_t_contract$_ISchemaResolver_$8608_t_bool__to_t_string_memory_ptr_t_address_t_bool__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 2643,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 2002,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 1667,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_SchemaRecord_$6386_memory_ptr__to_t_struct$_SchemaRecord_$6386_memory_ptr__fromStack_reversed": {
              "entryPoint": 1913,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 2283,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 2362,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 1557,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 2200,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x12": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 2153,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:7540:48",
                "nodeType": "YulBlock",
                "src": "0:7540:48",
                "statements": [
                  {
                    "nativeSrc": "6:3:48",
                    "nodeType": "YulBlock",
                    "src": "6:3:48",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "80:184:48",
                      "nodeType": "YulBlock",
                      "src": "80:184:48",
                      "statements": [
                        {
                          "nativeSrc": "90:10:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "90:10:48",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "99:1:48",
                            "nodeType": "YulLiteral",
                            "src": "99:1:48",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "94:1:48",
                              "nodeType": "YulTypedName",
                              "src": "94:1:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "159:63:48",
                            "nodeType": "YulBlock",
                            "src": "159:63:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "184:3:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "184:3:48"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "189:1:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "189:1:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "180:3:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "180:3:48"
                                      },
                                      "nativeSrc": "180:11:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "180:11:48"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "203:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "203:3:48"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "208:1:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "208:1:48"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "199:3:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "199:3:48"
                                          },
                                          "nativeSrc": "199:11:48",
                                          "nodeType": "YulFunctionCall",
                                          "src": "199:11:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "193:5:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "193:5:48"
                                      },
                                      "nativeSrc": "193:18:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "193:18:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "173:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "173:6:48"
                                  },
                                  "nativeSrc": "173:39:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "173:39:48"
                                },
                                "nativeSrc": "173:39:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "173:39:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "120:1:48",
                                "nodeType": "YulIdentifier",
                                "src": "120:1:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "123:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "123:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "117:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "117:2:48"
                            },
                            "nativeSrc": "117:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "117:13:48"
                          },
                          "nativeSrc": "109:113:48",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "131:19:48",
                            "nodeType": "YulBlock",
                            "src": "131:19:48",
                            "statements": [
                              {
                                "nativeSrc": "133:15:48",
                                "nodeType": "YulAssignment",
                                "src": "133:15:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "142:1:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "142:1:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "145:2:48",
                                      "nodeType": "YulLiteral",
                                      "src": "145:2:48",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "138:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "138:3:48"
                                  },
                                  "nativeSrc": "138:10:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "138:10:48"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "133:1:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "133:1:48"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "113:3:48",
                            "nodeType": "YulBlock",
                            "src": "113:3:48",
                            "statements": []
                          },
                          "src": "109:113:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "242:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "242:3:48"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "247:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "247:6:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "238:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "238:3:48"
                                },
                                "nativeSrc": "238:16:48",
                                "nodeType": "YulFunctionCall",
                                "src": "238:16:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "256:1:48",
                                "nodeType": "YulLiteral",
                                "src": "256:1:48",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "231:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "231:6:48"
                            },
                            "nativeSrc": "231:27:48",
                            "nodeType": "YulFunctionCall",
                            "src": "231:27:48"
                          },
                          "nativeSrc": "231:27:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "231:27:48"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "14:250:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "58:3:48",
                        "nodeType": "YulTypedName",
                        "src": "58:3:48",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "63:3:48",
                        "nodeType": "YulTypedName",
                        "src": "63:3:48",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "68:6:48",
                        "nodeType": "YulTypedName",
                        "src": "68:6:48",
                        "type": ""
                      }
                    ],
                    "src": "14:250:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "319:280:48",
                      "nodeType": "YulBlock",
                      "src": "319:280:48",
                      "statements": [
                        {
                          "nativeSrc": "329:26:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "329:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "349:5:48",
                                "nodeType": "YulIdentifier",
                                "src": "349:5:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "343:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "343:5:48"
                            },
                            "nativeSrc": "343:12:48",
                            "nodeType": "YulFunctionCall",
                            "src": "343:12:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "333:6:48",
                              "nodeType": "YulTypedName",
                              "src": "333:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "371:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "371:3:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "376:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "376:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "364:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "364:6:48"
                            },
                            "nativeSrc": "364:19:48",
                            "nodeType": "YulFunctionCall",
                            "src": "364:19:48"
                          },
                          "nativeSrc": "364:19:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "364:19:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "431:5:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "431:5:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "438:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "438:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "427:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "427:3:48"
                                },
                                "nativeSrc": "427:16:48",
                                "nodeType": "YulFunctionCall",
                                "src": "427:16:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "449:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "449:3:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "454:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "454:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "445:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "445:3:48"
                                },
                                "nativeSrc": "445:14:48",
                                "nodeType": "YulFunctionCall",
                                "src": "445:14:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "461:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "461:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "392:34:48",
                              "nodeType": "YulIdentifier",
                              "src": "392:34:48"
                            },
                            "nativeSrc": "392:76:48",
                            "nodeType": "YulFunctionCall",
                            "src": "392:76:48"
                          },
                          "nativeSrc": "392:76:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "392:76:48"
                        },
                        {
                          "nativeSrc": "477:116:48",
                          "nodeType": "YulAssignment",
                          "src": "477:116:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "492:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "492:3:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nativeSrc": "505:6:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "505:6:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "513:2:48",
                                            "nodeType": "YulLiteral",
                                            "src": "513:2:48",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "501:3:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "501:3:48"
                                        },
                                        "nativeSrc": "501:15:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "501:15:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "518:66:48",
                                        "nodeType": "YulLiteral",
                                        "src": "518:66:48",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "497:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "497:3:48"
                                    },
                                    "nativeSrc": "497:88:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "497:88:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "488:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "488:3:48"
                                },
                                "nativeSrc": "488:98:48",
                                "nodeType": "YulFunctionCall",
                                "src": "488:98:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "588:4:48",
                                "nodeType": "YulLiteral",
                                "src": "588:4:48",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "484:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "484:3:48"
                            },
                            "nativeSrc": "484:109:48",
                            "nodeType": "YulFunctionCall",
                            "src": "484:109:48"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "477:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "477:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nativeSrc": "269:330:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "296:5:48",
                        "nodeType": "YulTypedName",
                        "src": "296:5:48",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "303:3:48",
                        "nodeType": "YulTypedName",
                        "src": "303:3:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "311:3:48",
                        "nodeType": "YulTypedName",
                        "src": "311:3:48",
                        "type": ""
                      }
                    ],
                    "src": "269:330:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "725:99:48",
                      "nodeType": "YulBlock",
                      "src": "725:99:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "742:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "742:9:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "753:2:48",
                                "nodeType": "YulLiteral",
                                "src": "753:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "735:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "735:6:48"
                            },
                            "nativeSrc": "735:21:48",
                            "nodeType": "YulFunctionCall",
                            "src": "735:21:48"
                          },
                          "nativeSrc": "735:21:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "735:21:48"
                        },
                        {
                          "nativeSrc": "765:53:48",
                          "nodeType": "YulAssignment",
                          "src": "765:53:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "791:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "791:6:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "803:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "803:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "814:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "814:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "799:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "799:3:48"
                                },
                                "nativeSrc": "799:18:48",
                                "nodeType": "YulFunctionCall",
                                "src": "799:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nativeSrc": "773:17:48",
                              "nodeType": "YulIdentifier",
                              "src": "773:17:48"
                            },
                            "nativeSrc": "773:45:48",
                            "nodeType": "YulFunctionCall",
                            "src": "773:45:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "765:4:48",
                              "nodeType": "YulIdentifier",
                              "src": "765:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "604:220:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "694:9:48",
                        "nodeType": "YulTypedName",
                        "src": "694:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "705:6:48",
                        "nodeType": "YulTypedName",
                        "src": "705:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "716:4:48",
                        "nodeType": "YulTypedName",
                        "src": "716:4:48",
                        "type": ""
                      }
                    ],
                    "src": "604:220:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "875:114:48",
                      "nodeType": "YulBlock",
                      "src": "875:114:48",
                      "statements": [
                        {
                          "nativeSrc": "885:29:48",
                          "nodeType": "YulAssignment",
                          "src": "885:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "907:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "907:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "894:12:48",
                              "nodeType": "YulIdentifier",
                              "src": "894:12:48"
                            },
                            "nativeSrc": "894:20:48",
                            "nodeType": "YulFunctionCall",
                            "src": "894:20:48"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "885:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "885:5:48"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "967:16:48",
                            "nodeType": "YulBlock",
                            "src": "967:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "976:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "976:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "979:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "979:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "969:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "969:6:48"
                                  },
                                  "nativeSrc": "969:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "969:12:48"
                                },
                                "nativeSrc": "969:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "969:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "936:5:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "936:5:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "957:5:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "957:5:48"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "950:6:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "950:6:48"
                                        },
                                        "nativeSrc": "950:13:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "950:13:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "943:6:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "943:6:48"
                                    },
                                    "nativeSrc": "943:21:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "943:21:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "933:2:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "933:2:48"
                                },
                                "nativeSrc": "933:32:48",
                                "nodeType": "YulFunctionCall",
                                "src": "933:32:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "926:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "926:6:48"
                            },
                            "nativeSrc": "926:40:48",
                            "nodeType": "YulFunctionCall",
                            "src": "926:40:48"
                          },
                          "nativeSrc": "923:60:48",
                          "nodeType": "YulIf",
                          "src": "923:60:48"
                        }
                      ]
                    },
                    "name": "abi_decode_bool",
                    "nativeSrc": "829:160:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "854:6:48",
                        "nodeType": "YulTypedName",
                        "src": "854:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "865:5:48",
                        "nodeType": "YulTypedName",
                        "src": "865:5:48",
                        "type": ""
                      }
                    ],
                    "src": "829:160:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "1139:737:48",
                      "nodeType": "YulBlock",
                      "src": "1139:737:48",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1185:16:48",
                            "nodeType": "YulBlock",
                            "src": "1185:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1194:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1194:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1197:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1197:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1187:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1187:6:48"
                                  },
                                  "nativeSrc": "1187:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1187:12:48"
                                },
                                "nativeSrc": "1187:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1187:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1160:7:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1160:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1169:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1169:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1156:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1156:3:48"
                                },
                                "nativeSrc": "1156:23:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1156:23:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1181:2:48",
                                "nodeType": "YulLiteral",
                                "src": "1181:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1152:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "1152:3:48"
                            },
                            "nativeSrc": "1152:32:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1152:32:48"
                          },
                          "nativeSrc": "1149:52:48",
                          "nodeType": "YulIf",
                          "src": "1149:52:48"
                        },
                        {
                          "nativeSrc": "1210:37:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1210:37:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1237:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "1237:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1224:12:48",
                              "nodeType": "YulIdentifier",
                              "src": "1224:12:48"
                            },
                            "nativeSrc": "1224:23:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1224:23:48"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nativeSrc": "1214:6:48",
                              "nodeType": "YulTypedName",
                              "src": "1214:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1290:16:48",
                            "nodeType": "YulBlock",
                            "src": "1290:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1299:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1299:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1302:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1302:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1292:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1292:6:48"
                                  },
                                  "nativeSrc": "1292:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1292:12:48"
                                },
                                "nativeSrc": "1292:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1292:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "1262:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "1262:6:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1270:18:48",
                                "nodeType": "YulLiteral",
                                "src": "1270:18:48",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1259:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "1259:2:48"
                            },
                            "nativeSrc": "1259:30:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1259:30:48"
                          },
                          "nativeSrc": "1256:50:48",
                          "nodeType": "YulIf",
                          "src": "1256:50:48"
                        },
                        {
                          "nativeSrc": "1315:32:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1315:32:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1329:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "1329:9:48"
                              },
                              {
                                "name": "offset",
                                "nativeSrc": "1340:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "1340:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1325:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "1325:3:48"
                            },
                            "nativeSrc": "1325:22:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1325:22:48"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "1319:2:48",
                              "nodeType": "YulTypedName",
                              "src": "1319:2:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1395:16:48",
                            "nodeType": "YulBlock",
                            "src": "1395:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1404:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1404:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1407:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1407:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1397:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1397:6:48"
                                  },
                                  "nativeSrc": "1397:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1397:12:48"
                                },
                                "nativeSrc": "1397:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1397:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "1374:2:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "1374:2:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1378:4:48",
                                        "nodeType": "YulLiteral",
                                        "src": "1378:4:48",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1370:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "1370:3:48"
                                    },
                                    "nativeSrc": "1370:13:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1370:13:48"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1385:7:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1385:7:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "1366:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1366:3:48"
                                },
                                "nativeSrc": "1366:27:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1366:27:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1359:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1359:6:48"
                            },
                            "nativeSrc": "1359:35:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1359:35:48"
                          },
                          "nativeSrc": "1356:55:48",
                          "nodeType": "YulIf",
                          "src": "1356:55:48"
                        },
                        {
                          "nativeSrc": "1420:30:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1420:30:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nativeSrc": "1447:2:48",
                                "nodeType": "YulIdentifier",
                                "src": "1447:2:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1434:12:48",
                              "nodeType": "YulIdentifier",
                              "src": "1434:12:48"
                            },
                            "nativeSrc": "1434:16:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1434:16:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "1424:6:48",
                              "nodeType": "YulTypedName",
                              "src": "1424:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1493:16:48",
                            "nodeType": "YulBlock",
                            "src": "1493:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1502:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1502:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1505:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1505:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1495:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1495:6:48"
                                  },
                                  "nativeSrc": "1495:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1495:12:48"
                                },
                                "nativeSrc": "1495:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1495:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "1465:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "1465:6:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1473:18:48",
                                "nodeType": "YulLiteral",
                                "src": "1473:18:48",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1462:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "1462:2:48"
                            },
                            "nativeSrc": "1462:30:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1462:30:48"
                          },
                          "nativeSrc": "1459:50:48",
                          "nodeType": "YulIf",
                          "src": "1459:50:48"
                        },
                        {
                          "body": {
                            "nativeSrc": "1561:16:48",
                            "nodeType": "YulBlock",
                            "src": "1561:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1570:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1570:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1573:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1573:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1563:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1563:6:48"
                                  },
                                  "nativeSrc": "1563:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1563:12:48"
                                },
                                "nativeSrc": "1563:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1563:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "1532:2:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "1532:2:48"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "1536:6:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "1536:6:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1528:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "1528:3:48"
                                    },
                                    "nativeSrc": "1528:15:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1528:15:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1545:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "1545:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1524:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1524:3:48"
                                },
                                "nativeSrc": "1524:26:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1524:26:48"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "1552:7:48",
                                "nodeType": "YulIdentifier",
                                "src": "1552:7:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1521:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "1521:2:48"
                            },
                            "nativeSrc": "1521:39:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1521:39:48"
                          },
                          "nativeSrc": "1518:59:48",
                          "nodeType": "YulIf",
                          "src": "1518:59:48"
                        },
                        {
                          "nativeSrc": "1586:23:48",
                          "nodeType": "YulAssignment",
                          "src": "1586:23:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nativeSrc": "1600:2:48",
                                "nodeType": "YulIdentifier",
                                "src": "1600:2:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1604:4:48",
                                "nodeType": "YulLiteral",
                                "src": "1604:4:48",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1596:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "1596:3:48"
                            },
                            "nativeSrc": "1596:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1596:13:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1586:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1586:6:48"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1618:16:48",
                          "nodeType": "YulAssignment",
                          "src": "1618:16:48",
                          "value": {
                            "name": "length",
                            "nativeSrc": "1628:6:48",
                            "nodeType": "YulIdentifier",
                            "src": "1628:6:48"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1618:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1618:6:48"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1643:47:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1643:47:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1673:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1673:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1684:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "1684:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1669:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1669:3:48"
                                },
                                "nativeSrc": "1669:20:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1669:20:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1656:12:48",
                              "nodeType": "YulIdentifier",
                              "src": "1656:12:48"
                            },
                            "nativeSrc": "1656:34:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1656:34:48"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "1647:5:48",
                              "nodeType": "YulTypedName",
                              "src": "1647:5:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1776:16:48",
                            "nodeType": "YulBlock",
                            "src": "1776:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1785:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1785:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1788:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "1788:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1778:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1778:6:48"
                                  },
                                  "nativeSrc": "1778:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1778:12:48"
                                },
                                "nativeSrc": "1778:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "1778:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1712:5:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1712:5:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "1723:5:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "1723:5:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1730:42:48",
                                        "nodeType": "YulLiteral",
                                        "src": "1730:42:48",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "1719:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "1719:3:48"
                                    },
                                    "nativeSrc": "1719:54:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1719:54:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "1709:2:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1709:2:48"
                                },
                                "nativeSrc": "1709:65:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1709:65:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1702:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1702:6:48"
                            },
                            "nativeSrc": "1702:73:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1702:73:48"
                          },
                          "nativeSrc": "1699:93:48",
                          "nodeType": "YulIf",
                          "src": "1699:93:48"
                        },
                        {
                          "nativeSrc": "1801:15:48",
                          "nodeType": "YulAssignment",
                          "src": "1801:15:48",
                          "value": {
                            "name": "value",
                            "nativeSrc": "1811:5:48",
                            "nodeType": "YulIdentifier",
                            "src": "1811:5:48"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nativeSrc": "1801:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1801:6:48"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1825:45:48",
                          "nodeType": "YulAssignment",
                          "src": "1825:45:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1855:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "1855:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1866:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "1866:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1851:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "1851:3:48"
                                },
                                "nativeSrc": "1851:18:48",
                                "nodeType": "YulFunctionCall",
                                "src": "1851:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bool",
                              "nativeSrc": "1835:15:48",
                              "nodeType": "YulIdentifier",
                              "src": "1835:15:48"
                            },
                            "nativeSrc": "1835:35:48",
                            "nodeType": "YulFunctionCall",
                            "src": "1835:35:48"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nativeSrc": "1825:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "1825:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_calldata_ptrt_contract$_ISchemaResolver_$8608t_bool",
                    "nativeSrc": "994:882:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1081:9:48",
                        "nodeType": "YulTypedName",
                        "src": "1081:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1092:7:48",
                        "nodeType": "YulTypedName",
                        "src": "1092:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1104:6:48",
                        "nodeType": "YulTypedName",
                        "src": "1104:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1112:6:48",
                        "nodeType": "YulTypedName",
                        "src": "1112:6:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "1120:6:48",
                        "nodeType": "YulTypedName",
                        "src": "1120:6:48",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "1128:6:48",
                        "nodeType": "YulTypedName",
                        "src": "1128:6:48",
                        "type": ""
                      }
                    ],
                    "src": "994:882:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "1982:76:48",
                      "nodeType": "YulBlock",
                      "src": "1982:76:48",
                      "statements": [
                        {
                          "nativeSrc": "1992:26:48",
                          "nodeType": "YulAssignment",
                          "src": "1992:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2004:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "2004:9:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2015:2:48",
                                "nodeType": "YulLiteral",
                                "src": "2015:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2000:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "2000:3:48"
                            },
                            "nativeSrc": "2000:18:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2000:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1992:4:48",
                              "nodeType": "YulIdentifier",
                              "src": "1992:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2034:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "2034:9:48"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "2045:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "2045:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2027:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2027:6:48"
                            },
                            "nativeSrc": "2027:25:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2027:25:48"
                          },
                          "nativeSrc": "2027:25:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2027:25:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nativeSrc": "1881:177:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1951:9:48",
                        "nodeType": "YulTypedName",
                        "src": "1951:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1962:6:48",
                        "nodeType": "YulTypedName",
                        "src": "1962:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1973:4:48",
                        "nodeType": "YulTypedName",
                        "src": "1973:4:48",
                        "type": ""
                      }
                    ],
                    "src": "1881:177:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "2133:110:48",
                      "nodeType": "YulBlock",
                      "src": "2133:110:48",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2179:16:48",
                            "nodeType": "YulBlock",
                            "src": "2179:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2188:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "2188:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2191:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "2191:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2181:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2181:6:48"
                                  },
                                  "nativeSrc": "2181:12:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2181:12:48"
                                },
                                "nativeSrc": "2181:12:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "2181:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2154:7:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2154:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2163:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2163:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2150:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2150:3:48"
                                },
                                "nativeSrc": "2150:23:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2150:23:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2175:2:48",
                                "nodeType": "YulLiteral",
                                "src": "2175:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "2146:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "2146:3:48"
                            },
                            "nativeSrc": "2146:32:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2146:32:48"
                          },
                          "nativeSrc": "2143:52:48",
                          "nodeType": "YulIf",
                          "src": "2143:52:48"
                        },
                        {
                          "nativeSrc": "2204:33:48",
                          "nodeType": "YulAssignment",
                          "src": "2204:33:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2227:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "2227:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "2214:12:48",
                              "nodeType": "YulIdentifier",
                              "src": "2214:12:48"
                            },
                            "nativeSrc": "2214:23:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2214:23:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "2204:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2204:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nativeSrc": "2063:180:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2099:9:48",
                        "nodeType": "YulTypedName",
                        "src": "2099:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "2110:7:48",
                        "nodeType": "YulTypedName",
                        "src": "2110:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "2122:6:48",
                        "nodeType": "YulTypedName",
                        "src": "2122:6:48",
                        "type": ""
                      }
                    ],
                    "src": "2063:180:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "2409:433:48",
                      "nodeType": "YulBlock",
                      "src": "2409:433:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2426:9:48",
                                "nodeType": "YulIdentifier",
                                "src": "2426:9:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2437:2:48",
                                "nodeType": "YulLiteral",
                                "src": "2437:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2419:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2419:6:48"
                            },
                            "nativeSrc": "2419:21:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2419:21:48"
                          },
                          "nativeSrc": "2419:21:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2419:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2460:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2460:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2471:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2471:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2456:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2456:3:48"
                                },
                                "nativeSrc": "2456:18:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2456:18:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2482:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2482:6:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "2476:5:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2476:5:48"
                                },
                                "nativeSrc": "2476:13:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2476:13:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2449:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2449:6:48"
                            },
                            "nativeSrc": "2449:41:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2449:41:48"
                          },
                          "nativeSrc": "2449:41:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2449:41:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2510:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2510:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2521:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2521:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2506:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2506:3:48"
                                },
                                "nativeSrc": "2506:18:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2506:18:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "2540:6:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "2540:6:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2548:2:48",
                                            "nodeType": "YulLiteral",
                                            "src": "2548:2:48",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "2536:3:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "2536:3:48"
                                        },
                                        "nativeSrc": "2536:15:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2536:15:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "2530:5:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "2530:5:48"
                                    },
                                    "nativeSrc": "2530:22:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2530:22:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2554:42:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2554:42:48",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2526:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2526:3:48"
                                },
                                "nativeSrc": "2526:71:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2526:71:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2499:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2499:6:48"
                            },
                            "nativeSrc": "2499:99:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2499:99:48"
                          },
                          "nativeSrc": "2499:99:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2499:99:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2618:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2618:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2629:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2629:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2614:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2614:3:48"
                                },
                                "nativeSrc": "2614:18:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2614:18:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value0",
                                                "nativeSrc": "2658:6:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "2658:6:48"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2666:2:48",
                                                "nodeType": "YulLiteral",
                                                "src": "2666:2:48",
                                                "type": "",
                                                "value": "64"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "2654:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "2654:3:48"
                                            },
                                            "nativeSrc": "2654:15:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2654:15:48"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nativeSrc": "2648:5:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "2648:5:48"
                                        },
                                        "nativeSrc": "2648:22:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2648:22:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "2641:6:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "2641:6:48"
                                    },
                                    "nativeSrc": "2641:30:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2641:30:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "2634:6:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2634:6:48"
                                },
                                "nativeSrc": "2634:38:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2634:38:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2607:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2607:6:48"
                            },
                            "nativeSrc": "2607:66:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2607:66:48"
                          },
                          "nativeSrc": "2607:66:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2607:66:48"
                        },
                        {
                          "nativeSrc": "2682:42:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2682:42:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2712:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2712:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2720:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2720:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2708:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2708:3:48"
                                },
                                "nativeSrc": "2708:15:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2708:15:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "2702:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "2702:5:48"
                            },
                            "nativeSrc": "2702:22:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2702:22:48"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nativeSrc": "2686:12:48",
                              "nodeType": "YulTypedName",
                              "src": "2686:12:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2744:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2744:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2755:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2755:4:48",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2740:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2740:3:48"
                                },
                                "nativeSrc": "2740:20:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2740:20:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2762:4:48",
                                "nodeType": "YulLiteral",
                                "src": "2762:4:48",
                                "type": "",
                                "value": "0x80"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2733:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "2733:6:48"
                            },
                            "nativeSrc": "2733:34:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2733:34:48"
                          },
                          "nativeSrc": "2733:34:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "2733:34:48"
                        },
                        {
                          "nativeSrc": "2776:60:48",
                          "nodeType": "YulAssignment",
                          "src": "2776:60:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nativeSrc": "2802:12:48",
                                "nodeType": "YulIdentifier",
                                "src": "2802:12:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2820:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "2820:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2831:3:48",
                                    "nodeType": "YulLiteral",
                                    "src": "2831:3:48",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2816:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "2816:3:48"
                                },
                                "nativeSrc": "2816:19:48",
                                "nodeType": "YulFunctionCall",
                                "src": "2816:19:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nativeSrc": "2784:17:48",
                              "nodeType": "YulIdentifier",
                              "src": "2784:17:48"
                            },
                            "nativeSrc": "2784:52:48",
                            "nodeType": "YulFunctionCall",
                            "src": "2784:52:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2776:4:48",
                              "nodeType": "YulIdentifier",
                              "src": "2776:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_SchemaRecord_$6386_memory_ptr__to_t_struct$_SchemaRecord_$6386_memory_ptr__fromStack_reversed",
                    "nativeSrc": "2248:594:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2378:9:48",
                        "nodeType": "YulTypedName",
                        "src": "2378:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2389:6:48",
                        "nodeType": "YulTypedName",
                        "src": "2389:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2400:4:48",
                        "nodeType": "YulTypedName",
                        "src": "2400:4:48",
                        "type": ""
                      }
                    ],
                    "src": "2248:594:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "3284:550:48",
                      "nodeType": "YulBlock",
                      "src": "3284:550:48",
                      "statements": [
                        {
                          "nativeSrc": "3294:27:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3294:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "3314:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "3314:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "3308:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "3308:5:48"
                            },
                            "nativeSrc": "3308:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3308:13:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "3298:6:48",
                              "nodeType": "YulTypedName",
                              "src": "3298:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "3369:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3369:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3377:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3377:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3365:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3365:3:48"
                                },
                                "nativeSrc": "3365:17:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3365:17:48"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "3384:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "3384:3:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "3389:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "3389:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "3330:34:48",
                              "nodeType": "YulIdentifier",
                              "src": "3330:34:48"
                            },
                            "nativeSrc": "3330:66:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3330:66:48"
                          },
                          "nativeSrc": "3330:66:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3330:66:48"
                        },
                        {
                          "nativeSrc": "3405:29:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3405:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3422:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "3422:3:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "3427:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "3427:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3418:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "3418:3:48"
                            },
                            "nativeSrc": "3418:16:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3418:16:48"
                          },
                          "variables": [
                            {
                              "name": "end_1",
                              "nativeSrc": "3409:5:48",
                              "nodeType": "YulTypedName",
                              "src": "3409:5:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nativeSrc": "3450:5:48",
                                "nodeType": "YulIdentifier",
                                "src": "3450:5:48"
                              },
                              {
                                "hexValue": "2e",
                                "kind": "string",
                                "nativeSrc": "3457:3:48",
                                "nodeType": "YulLiteral",
                                "src": "3457:3:48",
                                "type": "",
                                "value": "."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3443:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "3443:6:48"
                            },
                            "nativeSrc": "3443:18:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3443:18:48"
                          },
                          "nativeSrc": "3443:18:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3443:18:48"
                        },
                        {
                          "nativeSrc": "3470:29:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3470:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "3492:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "3492:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "3486:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "3486:5:48"
                            },
                            "nativeSrc": "3486:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3486:13:48"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nativeSrc": "3474:8:48",
                              "nodeType": "YulTypedName",
                              "src": "3474:8:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "3547:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3547:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3555:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3555:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3543:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3543:3:48"
                                },
                                "nativeSrc": "3543:17:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3543:17:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "3566:5:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3566:5:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3573:1:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3573:1:48",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3562:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3562:3:48"
                                },
                                "nativeSrc": "3562:13:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3562:13:48"
                              },
                              {
                                "name": "length_1",
                                "nativeSrc": "3577:8:48",
                                "nodeType": "YulIdentifier",
                                "src": "3577:8:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "3508:34:48",
                              "nodeType": "YulIdentifier",
                              "src": "3508:34:48"
                            },
                            "nativeSrc": "3508:78:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3508:78:48"
                          },
                          "nativeSrc": "3508:78:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3508:78:48"
                        },
                        {
                          "nativeSrc": "3595:30:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3595:30:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nativeSrc": "3609:5:48",
                                "nodeType": "YulIdentifier",
                                "src": "3609:5:48"
                              },
                              {
                                "name": "length_1",
                                "nativeSrc": "3616:8:48",
                                "nodeType": "YulIdentifier",
                                "src": "3616:8:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3605:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "3605:3:48"
                            },
                            "nativeSrc": "3605:20:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3605:20:48"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "3599:2:48",
                              "nodeType": "YulTypedName",
                              "src": "3599:2:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "3645:2:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3645:2:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3649:1:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3649:1:48",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3641:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3641:3:48"
                                },
                                "nativeSrc": "3641:10:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3641:10:48"
                              },
                              {
                                "hexValue": "2e",
                                "kind": "string",
                                "nativeSrc": "3653:3:48",
                                "nodeType": "YulLiteral",
                                "src": "3653:3:48",
                                "type": "",
                                "value": "."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3634:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "3634:6:48"
                            },
                            "nativeSrc": "3634:23:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3634:23:48"
                          },
                          "nativeSrc": "3634:23:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3634:23:48"
                        },
                        {
                          "nativeSrc": "3666:29:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3666:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "3688:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "3688:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "3682:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "3682:5:48"
                            },
                            "nativeSrc": "3682:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3682:13:48"
                          },
                          "variables": [
                            {
                              "name": "length_2",
                              "nativeSrc": "3670:8:48",
                              "nodeType": "YulTypedName",
                              "src": "3670:8:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nativeSrc": "3743:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3743:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3751:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3751:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3739:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3739:3:48"
                                },
                                "nativeSrc": "3739:17:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3739:17:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "3762:2:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "3762:2:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3766:1:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3766:1:48",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3758:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3758:3:48"
                                },
                                "nativeSrc": "3758:10:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3758:10:48"
                              },
                              {
                                "name": "length_2",
                                "nativeSrc": "3770:8:48",
                                "nodeType": "YulIdentifier",
                                "src": "3770:8:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "3704:34:48",
                              "nodeType": "YulIdentifier",
                              "src": "3704:34:48"
                            },
                            "nativeSrc": "3704:75:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3704:75:48"
                          },
                          "nativeSrc": "3704:75:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3704:75:48"
                        },
                        {
                          "nativeSrc": "3788:40:48",
                          "nodeType": "YulAssignment",
                          "src": "3788:40:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "3807:2:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "3807:2:48"
                                      },
                                      {
                                        "name": "length_2",
                                        "nativeSrc": "3811:8:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "3811:8:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3803:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "3803:3:48"
                                    },
                                    "nativeSrc": "3803:17:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3803:17:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3822:1:48",
                                    "nodeType": "YulLiteral",
                                    "src": "3822:1:48",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3799:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "3799:3:48"
                                },
                                "nativeSrc": "3799:25:48",
                                "nodeType": "YulFunctionCall",
                                "src": "3799:25:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3826:1:48",
                                "nodeType": "YulLiteral",
                                "src": "3826:1:48",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3795:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "3795:3:48"
                            },
                            "nativeSrc": "3795:33:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3795:33:48"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "3788:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "3788:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "2847:987:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "3244:3:48",
                        "nodeType": "YulTypedName",
                        "src": "3244:3:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "3249:6:48",
                        "nodeType": "YulTypedName",
                        "src": "3249:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "3257:6:48",
                        "nodeType": "YulTypedName",
                        "src": "3257:6:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3265:6:48",
                        "nodeType": "YulTypedName",
                        "src": "3265:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "3276:3:48",
                        "nodeType": "YulTypedName",
                        "src": "3276:3:48",
                        "type": ""
                      }
                    ],
                    "src": "2847:987:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "3871:152:48",
                      "nodeType": "YulBlock",
                      "src": "3871:152:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3888:1:48",
                                "nodeType": "YulLiteral",
                                "src": "3888:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3891:77:48",
                                "nodeType": "YulLiteral",
                                "src": "3891:77:48",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3881:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "3881:6:48"
                            },
                            "nativeSrc": "3881:88:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3881:88:48"
                          },
                          "nativeSrc": "3881:88:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3881:88:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3985:1:48",
                                "nodeType": "YulLiteral",
                                "src": "3985:1:48",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3988:4:48",
                                "nodeType": "YulLiteral",
                                "src": "3988:4:48",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3978:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "3978:6:48"
                            },
                            "nativeSrc": "3978:15:48",
                            "nodeType": "YulFunctionCall",
                            "src": "3978:15:48"
                          },
                          "nativeSrc": "3978:15:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "3978:15:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4009:1:48",
                                "nodeType": "YulLiteral",
                                "src": "4009:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4012:4:48",
                                "nodeType": "YulLiteral",
                                "src": "4012:4:48",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "4002:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "4002:6:48"
                            },
                            "nativeSrc": "4002:15:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4002:15:48"
                          },
                          "nativeSrc": "4002:15:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "4002:15:48"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "3839:184:48",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3839:184:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "4083:382:48",
                      "nodeType": "YulBlock",
                      "src": "4083:382:48",
                      "statements": [
                        {
                          "nativeSrc": "4093:22:48",
                          "nodeType": "YulAssignment",
                          "src": "4093:22:48",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4107:1:48",
                                "nodeType": "YulLiteral",
                                "src": "4107:1:48",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nativeSrc": "4110:4:48",
                                "nodeType": "YulIdentifier",
                                "src": "4110:4:48"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "4103:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "4103:3:48"
                            },
                            "nativeSrc": "4103:12:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4103:12:48"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "4093:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "4093:6:48"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4124:38:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4124:38:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "4154:4:48",
                                "nodeType": "YulIdentifier",
                                "src": "4154:4:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4160:1:48",
                                "nodeType": "YulLiteral",
                                "src": "4160:1:48",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "4150:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "4150:3:48"
                            },
                            "nativeSrc": "4150:12:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4150:12:48"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "4128:18:48",
                              "nodeType": "YulTypedName",
                              "src": "4128:18:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "4201:31:48",
                            "nodeType": "YulBlock",
                            "src": "4201:31:48",
                            "statements": [
                              {
                                "nativeSrc": "4203:27:48",
                                "nodeType": "YulAssignment",
                                "src": "4203:27:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "4217:6:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "4217:6:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4225:4:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4225:4:48",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "4213:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4213:3:48"
                                  },
                                  "nativeSrc": "4213:17:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4213:17:48"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "4203:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4203:6:48"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "4181:18:48",
                                "nodeType": "YulIdentifier",
                                "src": "4181:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "4174:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "4174:6:48"
                            },
                            "nativeSrc": "4174:26:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4174:26:48"
                          },
                          "nativeSrc": "4171:61:48",
                          "nodeType": "YulIf",
                          "src": "4171:61:48"
                        },
                        {
                          "body": {
                            "nativeSrc": "4291:168:48",
                            "nodeType": "YulBlock",
                            "src": "4291:168:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4312:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4312:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4315:77:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4315:77:48",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "4305:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4305:6:48"
                                  },
                                  "nativeSrc": "4305:88:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4305:88:48"
                                },
                                "nativeSrc": "4305:88:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "4305:88:48"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4413:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4413:1:48",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4416:4:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4416:4:48",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "4406:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4406:6:48"
                                  },
                                  "nativeSrc": "4406:15:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4406:15:48"
                                },
                                "nativeSrc": "4406:15:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "4406:15:48"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4441:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4441:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4444:4:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4444:4:48",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4434:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4434:6:48"
                                  },
                                  "nativeSrc": "4434:15:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4434:15:48"
                                },
                                "nativeSrc": "4434:15:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "4434:15:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "4247:18:48",
                                "nodeType": "YulIdentifier",
                                "src": "4247:18:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "4270:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4270:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4278:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "4278:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "4267:2:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "4267:2:48"
                                },
                                "nativeSrc": "4267:14:48",
                                "nodeType": "YulFunctionCall",
                                "src": "4267:14:48"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "4244:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "4244:2:48"
                            },
                            "nativeSrc": "4244:38:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4244:38:48"
                          },
                          "nativeSrc": "4241:218:48",
                          "nodeType": "YulIf",
                          "src": "4241:218:48"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "4028:437:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "4063:4:48",
                        "nodeType": "YulTypedName",
                        "src": "4063:4:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "4072:6:48",
                        "nodeType": "YulTypedName",
                        "src": "4072:6:48",
                        "type": ""
                      }
                    ],
                    "src": "4028:437:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "4526:65:48",
                      "nodeType": "YulBlock",
                      "src": "4526:65:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4543:1:48",
                                "nodeType": "YulLiteral",
                                "src": "4543:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "4546:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "4546:3:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "4536:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "4536:6:48"
                            },
                            "nativeSrc": "4536:14:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4536:14:48"
                          },
                          "nativeSrc": "4536:14:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "4536:14:48"
                        },
                        {
                          "nativeSrc": "4559:26:48",
                          "nodeType": "YulAssignment",
                          "src": "4559:26:48",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4577:1:48",
                                "nodeType": "YulLiteral",
                                "src": "4577:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4580:4:48",
                                "nodeType": "YulLiteral",
                                "src": "4580:4:48",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "4567:9:48",
                              "nodeType": "YulIdentifier",
                              "src": "4567:9:48"
                            },
                            "nativeSrc": "4567:18:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4567:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "4559:4:48",
                              "nodeType": "YulIdentifier",
                              "src": "4559:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nativeSrc": "4470:121:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "4509:3:48",
                        "nodeType": "YulTypedName",
                        "src": "4509:3:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "4517:4:48",
                        "nodeType": "YulTypedName",
                        "src": "4517:4:48",
                        "type": ""
                      }
                    ],
                    "src": "4470:121:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "4677:437:48",
                      "nodeType": "YulBlock",
                      "src": "4677:437:48",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4710:398:48",
                            "nodeType": "YulBlock",
                            "src": "4710:398:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4731:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4731:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "name": "array",
                                      "nativeSrc": "4734:5:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "4734:5:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "4724:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4724:6:48"
                                  },
                                  "nativeSrc": "4724:16:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4724:16:48"
                                },
                                "nativeSrc": "4724:16:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "4724:16:48"
                              },
                              {
                                "nativeSrc": "4753:30:48",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4753:30:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4775:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4775:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4778:4:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4778:4:48",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nativeSrc": "4765:9:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4765:9:48"
                                  },
                                  "nativeSrc": "4765:18:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4765:18:48"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "4757:4:48",
                                    "nodeType": "YulTypedName",
                                    "src": "4757:4:48",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "4796:57:48",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4796:57:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "4819:4:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "4819:4:48"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4829:1:48",
                                          "nodeType": "YulLiteral",
                                          "src": "4829:1:48",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nativeSrc": "4836:10:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "4836:10:48"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "4848:2:48",
                                              "nodeType": "YulLiteral",
                                              "src": "4848:2:48",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "4832:3:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "4832:3:48"
                                          },
                                          "nativeSrc": "4832:19:48",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4832:19:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "4825:3:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "4825:3:48"
                                      },
                                      "nativeSrc": "4825:27:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4825:27:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4815:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4815:3:48"
                                  },
                                  "nativeSrc": "4815:38:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4815:38:48"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "4800:11:48",
                                    "nodeType": "YulTypedName",
                                    "src": "4800:11:48",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "4890:23:48",
                                  "nodeType": "YulBlock",
                                  "src": "4890:23:48",
                                  "statements": [
                                    {
                                      "nativeSrc": "4892:19:48",
                                      "nodeType": "YulAssignment",
                                      "src": "4892:19:48",
                                      "value": {
                                        "name": "data",
                                        "nativeSrc": "4907:4:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "4907:4:48"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "4892:11:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "4892:11:48"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "4872:10:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "4872:10:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4884:4:48",
                                      "nodeType": "YulLiteral",
                                      "src": "4884:4:48",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "4869:2:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4869:2:48"
                                  },
                                  "nativeSrc": "4869:20:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4869:20:48"
                                },
                                "nativeSrc": "4866:47:48",
                                "nodeType": "YulIf",
                                "src": "4866:47:48"
                              },
                              {
                                "nativeSrc": "4926:41:48",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4926:41:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "4940:4:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "4940:4:48"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4950:1:48",
                                          "nodeType": "YulLiteral",
                                          "src": "4950:1:48",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "4957:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "4957:3:48"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "4962:2:48",
                                              "nodeType": "YulLiteral",
                                              "src": "4962:2:48",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "4953:3:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "4953:3:48"
                                          },
                                          "nativeSrc": "4953:12:48",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4953:12:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "4946:3:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "4946:3:48"
                                      },
                                      "nativeSrc": "4946:20:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4946:20:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4936:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "4936:3:48"
                                  },
                                  "nativeSrc": "4936:31:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4936:31:48"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "4930:2:48",
                                    "nodeType": "YulTypedName",
                                    "src": "4930:2:48",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "4980:24:48",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4980:24:48",
                                "value": {
                                  "name": "deleteStart",
                                  "nativeSrc": "4993:11:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "4993:11:48"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "4984:5:48",
                                    "nodeType": "YulTypedName",
                                    "src": "4984:5:48",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "5078:20:48",
                                  "nodeType": "YulBlock",
                                  "src": "5078:20:48",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "5087:5:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "5087:5:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5094:1:48",
                                            "nodeType": "YulLiteral",
                                            "src": "5094:1:48",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nativeSrc": "5080:6:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5080:6:48"
                                        },
                                        "nativeSrc": "5080:16:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5080:16:48"
                                      },
                                      "nativeSrc": "5080:16:48",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "5080:16:48"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "5028:5:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "5028:5:48"
                                    },
                                    {
                                      "name": "_1",
                                      "nativeSrc": "5035:2:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "5035:2:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "5025:2:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "5025:2:48"
                                  },
                                  "nativeSrc": "5025:13:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5025:13:48"
                                },
                                "nativeSrc": "5017:81:48",
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nativeSrc": "5039:26:48",
                                  "nodeType": "YulBlock",
                                  "src": "5039:26:48",
                                  "statements": [
                                    {
                                      "nativeSrc": "5041:22:48",
                                      "nodeType": "YulAssignment",
                                      "src": "5041:22:48",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "5054:5:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "5054:5:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5061:1:48",
                                            "nodeType": "YulLiteral",
                                            "src": "5061:1:48",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "5050:3:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5050:3:48"
                                        },
                                        "nativeSrc": "5050:13:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5050:13:48"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nativeSrc": "5041:5:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5041:5:48"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nativeSrc": "5021:3:48",
                                  "nodeType": "YulBlock",
                                  "src": "5021:3:48",
                                  "statements": []
                                },
                                "src": "5017:81:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "4693:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "4693:3:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4698:2:48",
                                "nodeType": "YulLiteral",
                                "src": "4698:2:48",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "4690:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "4690:2:48"
                            },
                            "nativeSrc": "4690:11:48",
                            "nodeType": "YulFunctionCall",
                            "src": "4690:11:48"
                          },
                          "nativeSrc": "4687:421:48",
                          "nodeType": "YulIf",
                          "src": "4687:421:48"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nativeSrc": "4596:518:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "4649:5:48",
                        "nodeType": "YulTypedName",
                        "src": "4649:5:48",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "4656:3:48",
                        "nodeType": "YulTypedName",
                        "src": "4656:3:48",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "4661:10:48",
                        "nodeType": "YulTypedName",
                        "src": "4661:10:48",
                        "type": ""
                      }
                    ],
                    "src": "4596:518:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "5204:141:48",
                      "nodeType": "YulBlock",
                      "src": "5204:141:48",
                      "statements": [
                        {
                          "nativeSrc": "5214:125:48",
                          "nodeType": "YulAssignment",
                          "src": "5214:125:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "5229:4:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "5229:4:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "5247:1:48",
                                                "nodeType": "YulLiteral",
                                                "src": "5247:1:48",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nativeSrc": "5250:3:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "5250:3:48"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "5243:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "5243:3:48"
                                            },
                                            "nativeSrc": "5243:11:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5243:11:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5256:66:48",
                                            "nodeType": "YulLiteral",
                                            "src": "5256:66:48",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nativeSrc": "5239:3:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5239:3:48"
                                        },
                                        "nativeSrc": "5239:84:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5239:84:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "5235:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "5235:3:48"
                                    },
                                    "nativeSrc": "5235:89:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5235:89:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "5225:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "5225:3:48"
                                },
                                "nativeSrc": "5225:100:48",
                                "nodeType": "YulFunctionCall",
                                "src": "5225:100:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5331:1:48",
                                    "nodeType": "YulLiteral",
                                    "src": "5331:1:48",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "5334:3:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "5334:3:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "5327:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "5327:3:48"
                                },
                                "nativeSrc": "5327:11:48",
                                "nodeType": "YulFunctionCall",
                                "src": "5327:11:48"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "5222:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "5222:2:48"
                            },
                            "nativeSrc": "5222:117:48",
                            "nodeType": "YulFunctionCall",
                            "src": "5222:117:48"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "5214:4:48",
                              "nodeType": "YulIdentifier",
                              "src": "5214:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "5119:226:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "5181:4:48",
                        "nodeType": "YulTypedName",
                        "src": "5181:4:48",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "5187:3:48",
                        "nodeType": "YulTypedName",
                        "src": "5187:3:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "5195:4:48",
                        "nodeType": "YulTypedName",
                        "src": "5195:4:48",
                        "type": ""
                      }
                    ],
                    "src": "5119:226:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "5446:1322:48",
                      "nodeType": "YulBlock",
                      "src": "5446:1322:48",
                      "statements": [
                        {
                          "nativeSrc": "5456:24:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5456:24:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "5476:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "5476:3:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "5470:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "5470:5:48"
                            },
                            "nativeSrc": "5470:10:48",
                            "nodeType": "YulFunctionCall",
                            "src": "5470:10:48"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "5460:6:48",
                              "nodeType": "YulTypedName",
                              "src": "5460:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "5523:22:48",
                            "nodeType": "YulBlock",
                            "src": "5523:22:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "5525:16:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "5525:16:48"
                                  },
                                  "nativeSrc": "5525:18:48",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5525:18:48"
                                },
                                "nativeSrc": "5525:18:48",
                                "nodeType": "YulExpressionStatement",
                                "src": "5525:18:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "5495:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "5495:6:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5503:18:48",
                                "nodeType": "YulLiteral",
                                "src": "5503:18:48",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "5492:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "5492:2:48"
                            },
                            "nativeSrc": "5492:30:48",
                            "nodeType": "YulFunctionCall",
                            "src": "5492:30:48"
                          },
                          "nativeSrc": "5489:56:48",
                          "nodeType": "YulIf",
                          "src": "5489:56:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "5598:4:48",
                                "nodeType": "YulIdentifier",
                                "src": "5598:4:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "5636:4:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "5636:4:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "5630:5:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "5630:5:48"
                                    },
                                    "nativeSrc": "5630:11:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5630:11:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nativeSrc": "5604:25:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "5604:25:48"
                                },
                                "nativeSrc": "5604:38:48",
                                "nodeType": "YulFunctionCall",
                                "src": "5604:38:48"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "5644:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "5644:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nativeSrc": "5554:43:48",
                              "nodeType": "YulIdentifier",
                              "src": "5554:43:48"
                            },
                            "nativeSrc": "5554:97:48",
                            "nodeType": "YulFunctionCall",
                            "src": "5554:97:48"
                          },
                          "nativeSrc": "5554:97:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "5554:97:48"
                        },
                        {
                          "nativeSrc": "5660:18:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5660:18:48",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "5677:1:48",
                            "nodeType": "YulLiteral",
                            "src": "5677:1:48",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "5664:9:48",
                              "nodeType": "YulTypedName",
                              "src": "5664:9:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5687:17:48",
                          "nodeType": "YulAssignment",
                          "src": "5687:17:48",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "5700:4:48",
                            "nodeType": "YulLiteral",
                            "src": "5700:4:48",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "5687:9:48",
                              "nodeType": "YulIdentifier",
                              "src": "5687:9:48"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "5750:761:48",
                                "nodeType": "YulBlock",
                                "src": "5750:761:48",
                                "statements": [
                                  {
                                    "nativeSrc": "5764:94:48",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5764:94:48",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "5783:6:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5783:6:48"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "5791:66:48",
                                          "nodeType": "YulLiteral",
                                          "src": "5791:66:48",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "5779:3:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "5779:3:48"
                                      },
                                      "nativeSrc": "5779:79:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5779:79:48"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "5768:7:48",
                                        "nodeType": "YulTypedName",
                                        "src": "5768:7:48",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "5871:49:48",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5871:49:48",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "5915:4:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5915:4:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nativeSrc": "5885:29:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "5885:29:48"
                                      },
                                      "nativeSrc": "5885:35:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5885:35:48"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "5875:6:48",
                                        "nodeType": "YulTypedName",
                                        "src": "5875:6:48",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "5933:10:48",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5933:10:48",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "5942:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "5942:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "5937:1:48",
                                        "nodeType": "YulTypedName",
                                        "src": "5937:1:48",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "6013:165:48",
                                      "nodeType": "YulBlock",
                                      "src": "6013:165:48",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "6038:6:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "6038:6:48"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "6056:3:48",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "6056:3:48"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "6061:9:48",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "6061:9:48"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "6052:3:48",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6052:3:48"
                                                    },
                                                    "nativeSrc": "6052:19:48",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "6052:19:48"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "6046:5:48",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6046:5:48"
                                                },
                                                "nativeSrc": "6046:26:48",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6046:26:48"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "6031:6:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6031:6:48"
                                            },
                                            "nativeSrc": "6031:42:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6031:42:48"
                                          },
                                          "nativeSrc": "6031:42:48",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "6031:42:48"
                                        },
                                        {
                                          "nativeSrc": "6090:24:48",
                                          "nodeType": "YulAssignment",
                                          "src": "6090:24:48",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "6104:6:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "6104:6:48"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "6112:1:48",
                                                "nodeType": "YulLiteral",
                                                "src": "6112:1:48",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "6100:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6100:3:48"
                                            },
                                            "nativeSrc": "6100:14:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6100:14:48"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "6090:6:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6090:6:48"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "6131:33:48",
                                          "nodeType": "YulAssignment",
                                          "src": "6131:33:48",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "6148:9:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "6148:9:48"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "6159:4:48",
                                                "nodeType": "YulLiteral",
                                                "src": "6159:4:48",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "6144:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6144:3:48"
                                            },
                                            "nativeSrc": "6144:20:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6144:20:48"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "6131:9:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6131:9:48"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "5967:1:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5967:1:48"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "5970:7:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "5970:7:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "5964:2:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "5964:2:48"
                                      },
                                      "nativeSrc": "5964:14:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5964:14:48"
                                    },
                                    "nativeSrc": "5956:222:48",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "5979:21:48",
                                      "nodeType": "YulBlock",
                                      "src": "5979:21:48",
                                      "statements": [
                                        {
                                          "nativeSrc": "5981:17:48",
                                          "nodeType": "YulAssignment",
                                          "src": "5981:17:48",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "5990:1:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "5990:1:48"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "5993:4:48",
                                                "nodeType": "YulLiteral",
                                                "src": "5993:4:48",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "5986:3:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "5986:3:48"
                                            },
                                            "nativeSrc": "5986:12:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5986:12:48"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "5981:1:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "5981:1:48"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "5960:3:48",
                                      "nodeType": "YulBlock",
                                      "src": "5960:3:48",
                                      "statements": []
                                    },
                                    "src": "5956:222:48"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "6226:226:48",
                                      "nodeType": "YulBlock",
                                      "src": "6226:226:48",
                                      "statements": [
                                        {
                                          "nativeSrc": "6244:43:48",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "6244:43:48",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "6271:3:48",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6271:3:48"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "6276:9:48",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6276:9:48"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "6267:3:48",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6267:3:48"
                                                },
                                                "nativeSrc": "6267:19:48",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6267:19:48"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "6261:5:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6261:5:48"
                                            },
                                            "nativeSrc": "6261:26:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6261:26:48"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "6248:9:48",
                                              "nodeType": "YulTypedName",
                                              "src": "6248:9:48",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "6311:6:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "6311:6:48"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "6323:9:48",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6323:9:48"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nativeSrc": "6350:1:48",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "6350:1:48",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nativeSrc": "6353:6:48",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "6353:6:48"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nativeSrc": "6346:3:48",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "6346:3:48"
                                                                },
                                                                "nativeSrc": "6346:14:48",
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "6346:14:48"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nativeSrc": "6362:3:48",
                                                                "nodeType": "YulLiteral",
                                                                "src": "6362:3:48",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nativeSrc": "6342:3:48",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "6342:3:48"
                                                            },
                                                            "nativeSrc": "6342:24:48",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "6342:24:48"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nativeSrc": "6368:66:48",
                                                            "nodeType": "YulLiteral",
                                                            "src": "6368:66:48",
                                                            "type": "",
                                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nativeSrc": "6338:3:48",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "6338:3:48"
                                                        },
                                                        "nativeSrc": "6338:97:48",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "6338:97:48"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nativeSrc": "6334:3:48",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6334:3:48"
                                                    },
                                                    "nativeSrc": "6334:102:48",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "6334:102:48"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nativeSrc": "6319:3:48",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6319:3:48"
                                                },
                                                "nativeSrc": "6319:118:48",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6319:118:48"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "6304:6:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6304:6:48"
                                            },
                                            "nativeSrc": "6304:134:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6304:134:48"
                                          },
                                          "nativeSrc": "6304:134:48",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "6304:134:48"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "6197:7:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "6197:7:48"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "6206:6:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "6206:6:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "6194:2:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "6194:2:48"
                                      },
                                      "nativeSrc": "6194:19:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6194:19:48"
                                    },
                                    "nativeSrc": "6191:261:48",
                                    "nodeType": "YulIf",
                                    "src": "6191:261:48"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "6472:4:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "6472:4:48"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "6486:1:48",
                                                  "nodeType": "YulLiteral",
                                                  "src": "6486:1:48",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "6489:6:48",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6489:6:48"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nativeSrc": "6482:3:48",
                                                "nodeType": "YulIdentifier",
                                                "src": "6482:3:48"
                                              },
                                              "nativeSrc": "6482:14:48",
                                              "nodeType": "YulFunctionCall",
                                              "src": "6482:14:48"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "6498:1:48",
                                              "nodeType": "YulLiteral",
                                              "src": "6498:1:48",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "6478:3:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "6478:3:48"
                                          },
                                          "nativeSrc": "6478:22:48",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6478:22:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "6465:6:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "6465:6:48"
                                      },
                                      "nativeSrc": "6465:36:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6465:36:48"
                                    },
                                    "nativeSrc": "6465:36:48",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6465:36:48"
                                  }
                                ]
                              },
                              "nativeSrc": "5743:768:48",
                              "nodeType": "YulCase",
                              "src": "5743:768:48",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5748:1:48",
                                "nodeType": "YulLiteral",
                                "src": "5748:1:48",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "6528:234:48",
                                "nodeType": "YulBlock",
                                "src": "6528:234:48",
                                "statements": [
                                  {
                                    "nativeSrc": "6542:14:48",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "6542:14:48",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "6555:1:48",
                                      "nodeType": "YulLiteral",
                                      "src": "6555:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "6546:5:48",
                                        "nodeType": "YulTypedName",
                                        "src": "6546:5:48",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "6591:67:48",
                                      "nodeType": "YulBlock",
                                      "src": "6591:67:48",
                                      "statements": [
                                        {
                                          "nativeSrc": "6609:35:48",
                                          "nodeType": "YulAssignment",
                                          "src": "6609:35:48",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "6628:3:48",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6628:3:48"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "6633:9:48",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6633:9:48"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "6624:3:48",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6624:3:48"
                                                },
                                                "nativeSrc": "6624:19:48",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6624:19:48"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "6618:5:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6618:5:48"
                                            },
                                            "nativeSrc": "6618:26:48",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6618:26:48"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "6609:5:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6609:5:48"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "6572:6:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "6572:6:48"
                                    },
                                    "nativeSrc": "6569:89:48",
                                    "nodeType": "YulIf",
                                    "src": "6569:89:48"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "6678:4:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "6678:4:48"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "6737:5:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6737:5:48"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "6744:6:48",
                                              "nodeType": "YulIdentifier",
                                              "src": "6744:6:48"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "6684:52:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "6684:52:48"
                                          },
                                          "nativeSrc": "6684:67:48",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6684:67:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "6671:6:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "6671:6:48"
                                      },
                                      "nativeSrc": "6671:81:48",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6671:81:48"
                                    },
                                    "nativeSrc": "6671:81:48",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6671:81:48"
                                  }
                                ]
                              },
                              "nativeSrc": "6520:242:48",
                              "nodeType": "YulCase",
                              "src": "6520:242:48",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "5723:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "5723:6:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5731:2:48",
                                "nodeType": "YulLiteral",
                                "src": "5731:2:48",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "5720:2:48",
                              "nodeType": "YulIdentifier",
                              "src": "5720:2:48"
                            },
                            "nativeSrc": "5720:14:48",
                            "nodeType": "YulFunctionCall",
                            "src": "5720:14:48"
                          },
                          "nativeSrc": "5713:1049:48",
                          "nodeType": "YulSwitch",
                          "src": "5713:1049:48"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "5350:1418:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "5431:4:48",
                        "nodeType": "YulTypedName",
                        "src": "5431:4:48",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "5437:3:48",
                        "nodeType": "YulTypedName",
                        "src": "5437:3:48",
                        "type": ""
                      }
                    ],
                    "src": "5350:1418:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "6805:152:48",
                      "nodeType": "YulBlock",
                      "src": "6805:152:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6822:1:48",
                                "nodeType": "YulLiteral",
                                "src": "6822:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6825:77:48",
                                "nodeType": "YulLiteral",
                                "src": "6825:77:48",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6815:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "6815:6:48"
                            },
                            "nativeSrc": "6815:88:48",
                            "nodeType": "YulFunctionCall",
                            "src": "6815:88:48"
                          },
                          "nativeSrc": "6815:88:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "6815:88:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6919:1:48",
                                "nodeType": "YulLiteral",
                                "src": "6919:1:48",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6922:4:48",
                                "nodeType": "YulLiteral",
                                "src": "6922:4:48",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6912:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "6912:6:48"
                            },
                            "nativeSrc": "6912:15:48",
                            "nodeType": "YulFunctionCall",
                            "src": "6912:15:48"
                          },
                          "nativeSrc": "6912:15:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "6912:15:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6943:1:48",
                                "nodeType": "YulLiteral",
                                "src": "6943:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6946:4:48",
                                "nodeType": "YulLiteral",
                                "src": "6946:4:48",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "6936:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "6936:6:48"
                            },
                            "nativeSrc": "6936:15:48",
                            "nodeType": "YulFunctionCall",
                            "src": "6936:15:48"
                          },
                          "nativeSrc": "6936:15:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "6936:15:48"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nativeSrc": "6773:184:48",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6773:184:48"
                  },
                  {
                    "body": {
                      "nativeSrc": "7175:363:48",
                      "nodeType": "YulBlock",
                      "src": "7175:363:48",
                      "statements": [
                        {
                          "nativeSrc": "7185:27:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7185:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "7205:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "7205:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "7199:5:48",
                              "nodeType": "YulIdentifier",
                              "src": "7199:5:48"
                            },
                            "nativeSrc": "7199:13:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7199:13:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "7189:6:48",
                              "nodeType": "YulTypedName",
                              "src": "7189:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7260:6:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "7260:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7268:4:48",
                                    "nodeType": "YulLiteral",
                                    "src": "7268:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7256:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "7256:3:48"
                                },
                                "nativeSrc": "7256:17:48",
                                "nodeType": "YulFunctionCall",
                                "src": "7256:17:48"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "7275:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "7275:3:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "7280:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "7280:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "7221:34:48",
                              "nodeType": "YulIdentifier",
                              "src": "7221:34:48"
                            },
                            "nativeSrc": "7221:66:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7221:66:48"
                          },
                          "nativeSrc": "7221:66:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "7221:66:48"
                        },
                        {
                          "nativeSrc": "7296:29:48",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7296:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "7313:3:48",
                                "nodeType": "YulIdentifier",
                                "src": "7313:3:48"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "7318:6:48",
                                "nodeType": "YulIdentifier",
                                "src": "7318:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7309:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "7309:3:48"
                            },
                            "nativeSrc": "7309:16:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7309:16:48"
                          },
                          "variables": [
                            {
                              "name": "end_1",
                              "nativeSrc": "7300:5:48",
                              "nodeType": "YulTypedName",
                              "src": "7300:5:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nativeSrc": "7341:5:48",
                                "nodeType": "YulIdentifier",
                                "src": "7341:5:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7356:2:48",
                                        "nodeType": "YulLiteral",
                                        "src": "7356:2:48",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value1",
                                        "nativeSrc": "7360:6:48",
                                        "nodeType": "YulIdentifier",
                                        "src": "7360:6:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "7352:3:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "7352:3:48"
                                    },
                                    "nativeSrc": "7352:15:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7352:15:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7369:66:48",
                                    "nodeType": "YulLiteral",
                                    "src": "7369:66:48",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "7348:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "7348:3:48"
                                },
                                "nativeSrc": "7348:88:48",
                                "nodeType": "YulFunctionCall",
                                "src": "7348:88:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7334:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "7334:6:48"
                            },
                            "nativeSrc": "7334:103:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7334:103:48"
                          },
                          "nativeSrc": "7334:103:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "7334:103:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "7457:5:48",
                                    "nodeType": "YulIdentifier",
                                    "src": "7457:5:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7464:2:48",
                                    "nodeType": "YulLiteral",
                                    "src": "7464:2:48",
                                    "type": "",
                                    "value": "20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7453:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "7453:3:48"
                                },
                                "nativeSrc": "7453:14:48",
                                "nodeType": "YulFunctionCall",
                                "src": "7453:14:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7473:3:48",
                                    "nodeType": "YulLiteral",
                                    "src": "7473:3:48",
                                    "type": "",
                                    "value": "248"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value2",
                                            "nativeSrc": "7492:6:48",
                                            "nodeType": "YulIdentifier",
                                            "src": "7492:6:48"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "7485:6:48",
                                          "nodeType": "YulIdentifier",
                                          "src": "7485:6:48"
                                        },
                                        "nativeSrc": "7485:14:48",
                                        "nodeType": "YulFunctionCall",
                                        "src": "7485:14:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "7478:6:48",
                                      "nodeType": "YulIdentifier",
                                      "src": "7478:6:48"
                                    },
                                    "nativeSrc": "7478:22:48",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7478:22:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "7469:3:48",
                                  "nodeType": "YulIdentifier",
                                  "src": "7469:3:48"
                                },
                                "nativeSrc": "7469:32:48",
                                "nodeType": "YulFunctionCall",
                                "src": "7469:32:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7446:6:48",
                              "nodeType": "YulIdentifier",
                              "src": "7446:6:48"
                            },
                            "nativeSrc": "7446:56:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7446:56:48"
                          },
                          "nativeSrc": "7446:56:48",
                          "nodeType": "YulExpressionStatement",
                          "src": "7446:56:48"
                        },
                        {
                          "nativeSrc": "7511:21:48",
                          "nodeType": "YulAssignment",
                          "src": "7511:21:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nativeSrc": "7522:5:48",
                                "nodeType": "YulIdentifier",
                                "src": "7522:5:48"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7529:2:48",
                                "nodeType": "YulLiteral",
                                "src": "7529:2:48",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7518:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "7518:3:48"
                            },
                            "nativeSrc": "7518:14:48",
                            "nodeType": "YulFunctionCall",
                            "src": "7518:14:48"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "7511:3:48",
                              "nodeType": "YulIdentifier",
                              "src": "7511:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_contract$_ISchemaResolver_$8608_t_bool__to_t_string_memory_ptr_t_address_t_bool__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "6962:576:48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "7135:3:48",
                        "nodeType": "YulTypedName",
                        "src": "7135:3:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "7140:6:48",
                        "nodeType": "YulTypedName",
                        "src": "7140:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "7148:6:48",
                        "nodeType": "YulTypedName",
                        "src": "7148:6:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "7156:6:48",
                        "nodeType": "YulTypedName",
                        "src": "7156:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "7167:3:48",
                        "nodeType": "YulTypedName",
                        "src": "7167:3:48",
                        "type": ""
                      }
                    ],
                    "src": "6962:576:48"
                  }
                ]
              },
              "contents": "{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_contract$_ISchemaResolver_$8608t_bool(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 0x20)\n        value1 := length\n        let value := calldataload(add(headStart, 0x20))\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value2 := value\n        value3 := abi_decode_bool(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_struct$_SchemaRecord_$6386_memory_ptr__to_t_struct$_SchemaRecord_$6386_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), mload(value0))\n        mstore(add(headStart, 64), and(mload(add(value0, 32)), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), iszero(iszero(mload(add(value0, 64)))))\n        let memberValue0 := mload(add(value0, 96))\n        mstore(add(headStart, 0x80), 0x80)\n        tail := abi_encode_string(memberValue0, add(headStart, 160))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \".\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _1 := add(end_1, length_1)\n        mstore(add(_1, 1), \".\")\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_1, 2), length_2)\n        end := add(add(add(_1, length_2), 1), 1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_contract$_ISchemaResolver_$8608_t_bool__to_t_string_memory_ptr_t_address_t_bool__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(end_1, 20), shl(248, iszero(iszero(value2))))\n        end := add(end_1, 21)\n    }\n}",
              "id": 48,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "7122": [
              {
                "length": 32,
                "start": 172
              }
            ],
            "7124": [
              {
                "length": 32,
                "start": 213
              }
            ],
            "7126": [
              {
                "length": 32,
                "start": 254
              }
            ]
          },
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b6100776100723660046106b2565b610148565b60405190815260200161005b565b610098610093366004610760565b61030c565b60405161005b9190610779565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107d2565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af908261093a565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610779565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610898565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610898565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610869565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a53565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b803580151581146106ad57600080fd5b919050565b600080600080606085870312156106c857600080fd5b843567ffffffffffffffff8111156106df57600080fd5b8501601f810187136106f057600080fd5b803567ffffffffffffffff81111561070757600080fd5b87602082840101111561071957600080fd5b60209182019550935085013573ffffffffffffffffffffffffffffffffffffffff8116811461074757600080fd5b91506107556040860161069d565b905092959194509250565b60006020828403121561077257600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107ca60a0840182610639565b949350505050565b600084516107e4818460208901610615565b7f2e00000000000000000000000000000000000000000000000000000000000000908301908152845161081e816001840160208901610615565b7f2e0000000000000000000000000000000000000000000000000000000000000060019290910191820152835161085c816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806108ac57607f821691505b6020821081036108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561093557806000526020600020601f840160051c810160208510156109125750805b601f840160051c820191505b81811015610932576000815560010161091e565b50505b505050565b815167ffffffffffffffff81111561095457610954610869565b610968816109628454610898565b846108eb565b6020601f8211600181146109ba57600083156109845750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455610932565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015610a0857878501518255602094850194600190920191016109e8565b5084821015610a4457868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60008451610a65818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c634300081a000a",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x60D7A278 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xA2EA7C6E EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x683 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5B JUMP JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD0 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH2 0xF9 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH2 0x122 PUSH32 0x0 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x134 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP4 POP SWAP2 POP PUSH2 0x1CA SWAP1 POP DUP3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x213 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23369FA600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP4 DUP7 ADD MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 SWAP1 SWAP5 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP4 SWAP2 SWAP1 PUSH1 0x2 DUP3 ADD SWAP1 PUSH2 0x2AF SWAP1 DUP3 PUSH2 0x93A JUMP JUMPDEST POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xD0B86852E21F9E5FA4BC3B0CFF9757FFE243D50C4B43968A42202153D651EA5E DUP5 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 PUSH2 0x3AB SWAP1 PUSH2 0x898 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D7 SWAP1 PUSH2 0x898 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x424 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x424 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x407 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x441 DUP4 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x461 JUMPI PUSH2 0x461 PUSH2 0x869 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x48B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x495 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x515 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x57B JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x5A7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x5C5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x5DD JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x5F1 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x603 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x60F JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x630 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x618 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x651 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x615 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x696 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x639 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x707 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP6 POP SWAP4 POP DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 POP PUSH2 0x755 PUSH1 0x40 DUP7 ADD PUSH2 0x69D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP1 DUP5 ADD MSTORE PUSH2 0x7CA PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x639 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x7E4 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP5 MLOAD PUSH2 0x81E DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x85C DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x615 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x8AC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8E5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x935 JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x912 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x91E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x954 JUMPI PUSH2 0x954 PUSH2 0x869 JUMP JUMPDEST PUSH2 0x968 DUP2 PUSH2 0x962 DUP5 SLOAD PUSH2 0x898 JUMP JUMPDEST DUP5 PUSH2 0x8EB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x9BA JUMPI PUSH1 0x0 DUP4 ISZERO PUSH2 0x984 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x932 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA08 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x9E8 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xA44 JUMPI DUP7 DUP5 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xA65 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x615 JUMP JUMPDEST PUSH1 0x60 SWAP5 SWAP1 SWAP5 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP2 SWAP1 SWAP4 ADD SWAP1 DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x15 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ",
          "sourceMap": "344:1436:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;945:235:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;693:598:26;;;;;;:::i;:::-;;:::i;:::-;;;2027:25:48;;;2015:2;2000:18;693:598:26;1881:177:48;1333:114:26;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;945:235:27:-;987:13;1072:24;1089:6;1072:16;:24::i;:::-;1103;1120:6;1103:16;:24::i;:::-;1134;1151:6;1134:16;:24::i;:::-;1055:104;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1012:161;;945:235;:::o;693:598:26:-;795:7;814:32;849:146;;;;;;;;138:1:20;881:9:26;;849:146;;;;942:8;849:146;;;;;;975:9;849:146;;;;;;912:6;;849:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;849:146:26;;;;-1:-1:-1;814:181:26;;-1:-1:-1;849:146:26;-1:-1:-1;1020:21:26;;-1:-1:-1;814:181:26;1020:7;:21::i;:::-;138:1:20;1055:14:26;;;;;;;;;;:18;1006:35;;-1:-1:-1;1055:31:26;1051:84;;1109:15;;;;;;;;;;;;;;1051:84;1145:22;;;:16;1177:14;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1145:12;;1177:14;:29;;;;;;;;:::i;:::-;;;;;1238:10;1222:41;;1233:3;1222:41;1250:12;1222:41;;;;;;:::i;:::-;;;;;;;;1281:3;693:598;-1:-1:-1;;;;;;693:598:26:o;1333:114::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1426:9:26;:14;;;;;;;;;;;;1419:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1426:14;1419:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1333:114;;;:::o;637:698:13:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:13;-1:-1:-1;794:41:13;-1:-1:-1;955:28:13;;;971:2;955:28;1010:282;1041:5;;1180:10;1175:2;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:13;1010:282;1256:21;-1:-1:-1;1312:6:13;637:698;-1:-1:-1;;;637:698:13:o;1577:201:26:-;1650:7;1703:12;:19;;;1724:12;:21;;;1747:12;:22;;;1686:84;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1676:95;;;;;;1669:102;;1577:201;;;:::o;12214:916:18:-;12267:7;;12351:8;12342:17;;12338:103;;12388:8;12379:17;;;-1:-1:-1;12424:2:18;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:18;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:18;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:18;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:18;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:18;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13025:66;13117:6;12214:916;-1:-1:-1;;12214:916:18:o;14:250:48:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:48;238:16;;231:27;14:250::o;269:330::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;513:2;501:15;518:66;497:88;488:98;;;;588:4;484:109;;269:330;-1:-1:-1;;269:330:48:o;604:220::-;753:2;742:9;735:21;716:4;773:45;814:2;803:9;799:18;791:6;773:45;:::i;:::-;765:53;604:220;-1:-1:-1;;;604:220:48:o;829:160::-;894:20;;950:13;;943:21;933:32;;923:60;;979:1;976;969:12;923:60;829:160;;;:::o;994:882::-;1104:6;1112;1120;1128;1181:2;1169:9;1160:7;1156:23;1152:32;1149:52;;;1197:1;1194;1187:12;1149:52;1237:9;1224:23;1270:18;1262:6;1259:30;1256:50;;;1302:1;1299;1292:12;1256:50;1325:22;;1378:4;1370:13;;1366:27;-1:-1:-1;1356:55:48;;1407:1;1404;1397:12;1356:55;1447:2;1434:16;1473:18;1465:6;1462:30;1459:50;;;1505:1;1502;1495:12;1459:50;1552:7;1545:4;1536:6;1532:2;1528:15;1524:26;1521:39;1518:59;;;1573:1;1570;1563:12;1518:59;1604:4;1596:13;;;;-1:-1:-1;1628:6:48;-1:-1:-1;1669:20:48;;1656:34;1730:42;1719:54;;1709:65;;1699:93;;1788:1;1785;1778:12;1699:93;1811:5;-1:-1:-1;1835:35:48;1866:2;1851:18;;1835:35;:::i;:::-;1825:45;;994:882;;;;;;;:::o;2063:180::-;2122:6;2175:2;2163:9;2154:7;2150:23;2146:32;2143:52;;;2191:1;2188;2181:12;2143:52;-1:-1:-1;2214:23:48;;2063:180;-1:-1:-1;2063:180:48:o;2248:594::-;2437:2;2426:9;2419:21;2482:6;2476:13;2471:2;2460:9;2456:18;2449:41;2554:42;2548:2;2540:6;2536:15;2530:22;2526:71;2521:2;2510:9;2506:18;2499:99;2666:2;2658:6;2654:15;2648:22;2641:30;2634:38;2629:2;2618:9;2614:18;2607:66;2400:4;2720:2;2712:6;2708:15;2702:22;2762:4;2755;2744:9;2740:20;2733:34;2784:52;2831:3;2820:9;2816:19;2802:12;2784:52;:::i;:::-;2776:60;2248:594;-1:-1:-1;;;;2248:594:48:o;2847:987::-;3276:3;3314:6;3308:13;3330:66;3389:6;3384:3;3377:4;3369:6;3365:17;3330:66;:::i;:::-;3457:3;3418:16;;;3443:18;;;3486:13;;3508:78;3486:13;3573:1;3562:13;;3555:4;3543:17;;3508:78;:::i;:::-;3653:3;3649:1;3605:20;;;;3641:10;;;3634:23;3682:13;;3704:75;3682:13;3766:1;3758:10;;3751:4;3739:17;;3704:75;:::i;:::-;3803:17;3795:33;;;;-1:-1:-1;;;;;2847:987:48:o;3839:184::-;3891:77;3888:1;3881:88;3988:4;3985:1;3978:15;4012:4;4009:1;4002:15;4028:437;4107:1;4103:12;;;;4150;;;4171:61;;4225:4;4217:6;4213:17;4203:27;;4171:61;4278:2;4270:6;4267:14;4247:18;4244:38;4241:218;;4315:77;4312:1;4305:88;4416:4;4413:1;4406:15;4444:4;4441:1;4434:15;4241:218;;4028:437;;;:::o;4596:518::-;4698:2;4693:3;4690:11;4687:421;;;4734:5;4731:1;4724:16;4778:4;4775:1;4765:18;4848:2;4836:10;4832:19;4829:1;4825:27;4819:4;4815:38;4884:4;4872:10;4869:20;4866:47;;;-1:-1:-1;4907:4:48;4866:47;4962:2;4957:3;4953:12;4950:1;4946:20;4940:4;4936:31;4926:41;;5017:81;5035:2;5028:5;5025:13;5017:81;;;5094:1;5080:16;;5061:1;5050:13;5017:81;;;5021:3;;4687:421;4596:518;;;:::o;5350:1418::-;5476:3;5470:10;5503:18;5495:6;5492:30;5489:56;;;5525:18;;:::i;:::-;5554:97;5644:6;5604:38;5636:4;5630:11;5604:38;:::i;:::-;5598:4;5554:97;:::i;:::-;5700:4;5731:2;5720:14;;5748:1;5743:768;;;;6555:1;6572:6;6569:89;;;-1:-1:-1;6624:19:48;;;6618:26;6569:89;5256:66;5247:1;5243:11;;;5239:84;5235:89;5225:100;5331:1;5327:11;;;5222:117;6671:81;;5713:1049;;5743:768;4543:1;4536:14;;;4580:4;4567:18;;5791:66;5779:79;;;5956:222;5970:7;5967:1;5964:14;5956:222;;;6052:19;;;6046:26;6031:42;;6159:4;6144:20;;;;6112:1;6100:14;;;;5986:12;5956:222;;;5960:3;6206:6;6197:7;6194:19;6191:261;;;6267:19;;;6261:26;6368:66;6350:1;6346:14;;;6362:3;6342:24;6338:97;6334:102;6319:118;6304:134;;6191:261;-1:-1:-1;;;;6498:1:48;6482:14;;;6478:22;6465:36;;-1:-1:-1;5350:1418:48:o;6962:576::-;7167:3;7205:6;7199:13;7221:66;7280:6;7275:3;7268:4;7260:6;7256:17;7221:66;:::i;:::-;7356:2;7352:15;;;;7369:66;7348:88;7309:16;;;;7334:103;;;7485:14;;7478:22;7473:3;7469:32;7464:2;7453:14;;7446:56;7529:2;7518:14;;6962:576;-1:-1:-1;;6962:576:48:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "548200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "getSchema(bytes32)": "infinite",
            "register(string,address,bool)": "infinite",
            "version()": "infinite"
          },
          "internal": {
            "_getUID(struct SchemaRecord memory)": "infinite"
          }
        },
        "methodIdentifiers": {
          "getSchema(bytes32)": "a2ea7c6e",
          "register(string,address,bool)": "60d7a278",
          "version()": "54fd4d50"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct SchemaRecord\",\"name\":\"schema\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"schema\":\"The schema data.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new SchemaRegistry instance.\"},\"getSchema(bytes32)\":{\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"SchemaRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"notice\":\"Emitted when a new schema has been registered\"}},\"kind\":\"user\",\"methods\":{\"getSchema(bytes32)\":{\"notice\":\"Returns an existing schema by UID\"},\"register(string,address,bool)\":{\"notice\":\"Submits and reserves a new schema\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The global schema registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SchemaRegistry.sol\":\"SchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"contracts/SchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\nimport { EMPTY_UID } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\nimport { ISchemaRegistry, SchemaRecord } from \\\"./ISchemaRegistry.sol\\\";\\n\\n/// @title SchemaRegistry\\n/// @notice The global schema registry.\\ncontract SchemaRegistry is ISchemaRegistry, Semver {\\n    error AlreadyExists();\\n\\n    // The global mapping between schema records and their IDs.\\n    mapping(bytes32 uid => SchemaRecord schemaRecord) private _registry;\\n\\n    /// @dev Creates a new SchemaRegistry instance.\\n    constructor() Semver(1, 3, 0) {}\\n\\n    /// @inheritdoc ISchemaRegistry\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32) {\\n        SchemaRecord memory schemaRecord = SchemaRecord({\\n            uid: EMPTY_UID,\\n            schema: schema,\\n            resolver: resolver,\\n            revocable: revocable\\n        });\\n\\n        bytes32 uid = _getUID(schemaRecord);\\n        if (_registry[uid].uid != EMPTY_UID) {\\n            revert AlreadyExists();\\n        }\\n\\n        schemaRecord.uid = uid;\\n        _registry[uid] = schemaRecord;\\n\\n        emit Registered(uid, msg.sender, schemaRecord);\\n\\n        return uid;\\n    }\\n\\n    /// @inheritdoc ISchemaRegistry\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory) {\\n        return _registry[uid];\\n    }\\n\\n    /// @dev Calculates a UID for a given schema.\\n    /// @param schemaRecord The input schema.\\n    /// @return schema UID.\\n    function _getUID(SchemaRecord memory schemaRecord) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(schemaRecord.schema, schemaRecord.resolver, schemaRecord.revocable));\\n    }\\n}\\n\",\"keccak256\":\"0x278d80056cad9756840d7b57400e80d332846dde8551d2d2e277f42993fad66f\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver is ISemver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _patch;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _patch = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_patch))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 7002,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "_registry",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(SchemaRecord)6386_storage)"
          }
        ],
        "types": {
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ISchemaResolver)8608": {
            "encoding": "inplace",
            "label": "contract ISchemaResolver",
            "numberOfBytes": "20"
          },
          "t_mapping(t_bytes32,t_struct(SchemaRecord)6386_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct SchemaRecord)",
            "numberOfBytes": "32",
            "value": "t_struct(SchemaRecord)6386_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(SchemaRecord)6386_storage": {
            "encoding": "inplace",
            "label": "struct SchemaRecord",
            "members": [
              {
                "astId": 6378,
                "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
                "label": "uid",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 6381,
                "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
                "label": "resolver",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(ISchemaResolver)8608"
              },
              {
                "astId": 6383,
                "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
                "label": "revocable",
                "offset": 20,
                "slot": "1",
                "type": "t_bool"
              },
              {
                "astId": 6385,
                "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
                "label": "schema",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
              }
            ],
            "numberOfBytes": "96"
          }
        }
      },
      "userdoc": {
        "events": {
          "Registered(bytes32,address,(bytes32,address,bool,string))": {
            "notice": "Emitted when a new schema has been registered"
          }
        },
        "kind": "user",
        "methods": {
          "getSchema(bytes32)": {
            "notice": "Returns an existing schema by UID"
          },
          "register(string,address,bool)": {
            "notice": "Submits and reserves a new schema"
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "notice": "The global schema registry.",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/Common.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\"\n    },\n    \"contracts/EAS.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { EIP1271Verifier } from \\\"./eip1271/EIP1271Verifier.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AccessDenied,\\n    EMPTY_UID,\\n    InvalidLength,\\n    NotFound,\\n    NO_EXPIRATION_TIME,\\n    uncheckedInc\\n} from \\\"./Common.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    Attestation,\\n    AttestationRequest,\\n    AttestationRequestData,\\n    DelegatedAttestationRequest,\\n    DelegatedRevocationRequest,\\n    IEAS,\\n    MultiAttestationRequest,\\n    MultiDelegatedAttestationRequest,\\n    MultiDelegatedRevocationRequest,\\n    MultiRevocationRequest,\\n    RevocationRequest,\\n    RevocationRequestData\\n} from \\\"./IEAS.sol\\\";\\n\\nimport { Semver } from \\\"./Semver.sol\\\";\\nimport { ISchemaRegistry, SchemaRecord } from \\\"./ISchemaRegistry.sol\\\";\\n\\n/// @title EAS\\n/// @notice The Ethereum Attestation Service protocol.\\ncontract EAS is IEAS, Semver, EIP1271Verifier {\\n    using Address for address payable;\\n\\n    error AlreadyRevoked();\\n    error AlreadyRevokedOffchain();\\n    error AlreadyTimestamped();\\n    error InsufficientValue();\\n    error InvalidAttestation();\\n    error InvalidAttestations();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidRevocation();\\n    error InvalidRevocations();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error Irrevocable();\\n    error NotPayable();\\n    error WrongSchema();\\n\\n    /// @notice A struct representing an internal attestation result.\\n    struct AttestationsResult {\\n        uint256 usedValue; // Total ETH amount that was sent to resolvers.\\n        bytes32[] uids; // UIDs of the new attestations.\\n    }\\n\\n    // The global schema registry.\\n    ISchemaRegistry private immutable _schemaRegistry;\\n\\n    // The global mapping between attestations and their UIDs.\\n    mapping(bytes32 uid => Attestation attestation) private _db;\\n\\n    // The global mapping between data and their timestamps.\\n    mapping(bytes32 data => uint64 timestamp) private _timestamps;\\n\\n    // The global mapping between data and their revocation timestamps.\\n    mapping(address revoker => mapping(bytes32 data => uint64 timestamp) timestamps) private _revocationsOffchain;\\n\\n    /// @dev Creates a new EAS instance.\\n    /// @param registry The address of the global schema registry.\\n    constructor(ISchemaRegistry registry) Semver(1, 3, 0) EIP1271Verifier(\\\"EAS\\\", \\\"1.3.0\\\") {\\n        if (address(registry) == address(0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        _schemaRegistry = registry;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function getSchemaRegistry() external view returns (ISchemaRegistry) {\\n        return _schemaRegistry;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32) {\\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\\n        data[0] = request.data;\\n\\n        return _attest(request.schema, data, msg.sender, msg.value, true).uids[0];\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32) {\\n        _verifyAttest(delegatedRequest);\\n\\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\\n        data[0] = delegatedRequest.data;\\n\\n        return _attest(delegatedRequest.schema, data, delegatedRequest.attester, msg.value, true).uids[0];\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory) {\\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\\n        // all the returned UIDs into a single list.\\n        uint256 length = multiRequests.length;\\n        bytes32[][] memory totalUIDs = new bytes32[][](length);\\n        uint256 totalUIDCount = 0;\\n\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            // Process the current batch of attestations.\\n            MultiAttestationRequest calldata multiRequest = multiRequests[i];\\n\\n            // Ensure that data isn't empty.\\n            if (multiRequest.data.length == 0) {\\n                revert InvalidLength();\\n            }\\n\\n            AttestationsResult memory res = _attest(\\n                multiRequest.schema,\\n                multiRequest.data,\\n                msg.sender,\\n                availableValue,\\n                last\\n            );\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= res.usedValue;\\n\\n            // Collect UIDs (and merge them later).\\n            totalUIDs[i] = res.uids;\\n            unchecked {\\n                totalUIDCount += res.uids.length;\\n            }\\n        }\\n\\n        // Merge all the collected UIDs and return them as a flatten array.\\n        return _mergeUIDs(totalUIDs, totalUIDCount);\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory) {\\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\\n        // all the returned UIDs into a single list.\\n        uint256 length = multiDelegatedRequests.length;\\n        bytes32[][] memory totalUIDs = new bytes32[][](length);\\n        uint256 totalUIDCount = 0;\\n\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiDelegatedAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify signatures. Please note that the signatures are assumed to be signed with increasing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _verifyAttest(\\n                    DelegatedAttestationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: data[j],\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        attester: multiDelegatedRequest.attester,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            // Process the current batch of attestations.\\n            AttestationsResult memory res = _attest(\\n                multiDelegatedRequest.schema,\\n                data,\\n                multiDelegatedRequest.attester,\\n                availableValue,\\n                last\\n            );\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= res.usedValue;\\n\\n            // Collect UIDs (and merge them later).\\n            totalUIDs[i] = res.uids;\\n            unchecked {\\n                totalUIDCount += res.uids.length;\\n            }\\n        }\\n\\n        // Merge all the collected UIDs and return them as a flatten array.\\n        return _mergeUIDs(totalUIDs, totalUIDCount);\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function revoke(RevocationRequest calldata request) external payable {\\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\\n        data[0] = request.data;\\n\\n        _revoke(request.schema, data, msg.sender, msg.value, true);\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable {\\n        _verifyRevoke(delegatedRequest);\\n\\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\\n        data[0] = delegatedRequest.data;\\n\\n        _revoke(delegatedRequest.schema, data, delegatedRequest.revoker, msg.value, true);\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable {\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        uint256 length = multiRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiRevocationRequest calldata multiRequest = multiRequests[i];\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= _revoke(multiRequest.schema, multiRequest.data, msg.sender, availableValue, last);\\n        }\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable {\\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 availableValue = msg.value;\\n\\n        uint256 length = multiDelegatedRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\\n            // last and final batch).\\n            bool last;\\n            unchecked {\\n                last = i == length - 1;\\n            }\\n\\n            MultiDelegatedRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify signatures. Please note that the signatures are assumed to be signed with increasing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _verifyRevoke(\\n                    DelegatedRevocationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: data[j],\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        revoker: multiDelegatedRequest.revoker,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\\n            availableValue -= _revoke(\\n                multiDelegatedRequest.schema,\\n                data,\\n                multiDelegatedRequest.revoker,\\n                availableValue,\\n                last\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function timestamp(bytes32 data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        _timestamp(data, time);\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function revokeOffchain(bytes32 data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        _revokeOffchain(msg.sender, data, time);\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        uint256 length = data.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _revokeOffchain(msg.sender, data[i], time);\\n        }\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64) {\\n        uint64 time = _time();\\n\\n        uint256 length = data.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _timestamp(data[i], time);\\n        }\\n\\n        return time;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory) {\\n        return _db[uid];\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function isAttestationValid(bytes32 uid) public view returns (bool) {\\n        return _db[uid].uid != EMPTY_UID;\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function getTimestamp(bytes32 data) external view returns (uint64) {\\n        return _timestamps[data];\\n    }\\n\\n    /// @inheritdoc IEAS\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64) {\\n        return _revocationsOffchain[revoker][data];\\n    }\\n\\n    /// @dev Attests to a specific schema.\\n    /// @param schemaUID The unique identifier of the schema to attest to.\\n    /// @param data The arguments of the attestation requests.\\n    /// @param attester The attesting account.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return The UID of the new attestations and the total sent ETH amount.\\n    function _attest(\\n        bytes32 schemaUID,\\n        AttestationRequestData[] memory data,\\n        address attester,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (AttestationsResult memory) {\\n        uint256 length = data.length;\\n\\n        AttestationsResult memory res;\\n        res.uids = new bytes32[](length);\\n\\n        // Ensure that we aren't attempting to attest to a non-existing schema.\\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\\n        if (schemaRecord.uid == EMPTY_UID) {\\n            revert InvalidSchema();\\n        }\\n\\n        Attestation[] memory attestations = new Attestation[](length);\\n        uint256[] memory values = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            AttestationRequestData memory request = data[i];\\n\\n            // Ensure that either no expiration time was set or that it was set in the future.\\n            if (request.expirationTime != NO_EXPIRATION_TIME && request.expirationTime <= _time()) {\\n                revert InvalidExpirationTime();\\n            }\\n\\n            // Ensure that we aren't trying to make a revocable attestation for a non-revocable schema.\\n            if (!schemaRecord.revocable && request.revocable) {\\n                revert Irrevocable();\\n            }\\n\\n            Attestation memory attestation = Attestation({\\n                uid: EMPTY_UID,\\n                schema: schemaUID,\\n                refUID: request.refUID,\\n                time: _time(),\\n                expirationTime: request.expirationTime,\\n                revocationTime: 0,\\n                recipient: request.recipient,\\n                attester: attester,\\n                revocable: request.revocable,\\n                data: request.data\\n            });\\n\\n            // Look for the first non-existing UID (and use a bump seed/nonce in the rare case of a conflict).\\n            bytes32 uid;\\n            uint32 bump = 0;\\n            while (true) {\\n                uid = _getUID(attestation, bump);\\n                if (_db[uid].uid == EMPTY_UID) {\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++bump;\\n                }\\n            }\\n            attestation.uid = uid;\\n\\n            _db[uid] = attestation;\\n\\n            if (request.refUID != EMPTY_UID) {\\n                // Ensure that we aren't trying to attest to a non-existing referenced UID.\\n                if (!isAttestationValid(request.refUID)) {\\n                    revert NotFound();\\n                }\\n            }\\n\\n            attestations[i] = attestation;\\n            values[i] = request.value;\\n\\n            res.uids[i] = uid;\\n\\n            emit Attested(request.recipient, attester, uid, schemaUID);\\n        }\\n\\n        res.usedValue = _resolveAttestations(schemaRecord, attestations, values, false, availableValue, last);\\n\\n        return res;\\n    }\\n\\n    /// @dev Revokes an existing attestation to a specific schema.\\n    /// @param schemaUID The unique identifier of the schema to attest to.\\n    /// @param data The arguments of the revocation requests.\\n    /// @param revoker The revoking account.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _revoke(\\n        bytes32 schemaUID,\\n        RevocationRequestData[] memory data,\\n        address revoker,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        // Ensure that a non-existing schema ID wasn't passed by accident.\\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\\n        if (schemaRecord.uid == EMPTY_UID) {\\n            revert InvalidSchema();\\n        }\\n\\n        uint256 length = data.length;\\n        Attestation[] memory attestations = new Attestation[](length);\\n        uint256[] memory values = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            RevocationRequestData memory request = data[i];\\n\\n            Attestation storage attestation = _db[request.uid];\\n\\n            // Ensure that we aren't attempting to revoke a non-existing attestation.\\n            if (attestation.uid == EMPTY_UID) {\\n                revert NotFound();\\n            }\\n\\n            // Ensure that a wrong schema ID wasn't passed by accident.\\n            if (attestation.schema != schemaUID) {\\n                revert InvalidSchema();\\n            }\\n\\n            // Allow only original attesters to revoke their attestations.\\n            if (attestation.attester != revoker) {\\n                revert AccessDenied();\\n            }\\n\\n            // Please note that also checking of the schema itself is revocable is unnecessary, since it's not possible to\\n            // make revocable attestations to an irrevocable schema.\\n            if (!attestation.revocable) {\\n                revert Irrevocable();\\n            }\\n\\n            // Ensure that we aren't trying to revoke the same attestation twice.\\n            if (attestation.revocationTime != 0) {\\n                revert AlreadyRevoked();\\n            }\\n            attestation.revocationTime = _time();\\n\\n            attestations[i] = attestation;\\n            values[i] = request.value;\\n\\n            emit Revoked(attestations[i].recipient, revoker, request.uid, schemaUID);\\n        }\\n\\n        return _resolveAttestations(schemaRecord, attestations, values, true, availableValue, last);\\n    }\\n\\n    /// @dev Resolves a new attestation or a revocation of an existing attestation.\\n    /// @param schemaRecord The schema of the attestation.\\n    /// @param attestation The data of the attestation to make/revoke.\\n    /// @param value An explicit ETH amount to send to the resolver.\\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _resolveAttestation(\\n        SchemaRecord memory schemaRecord,\\n        Attestation memory attestation,\\n        uint256 value,\\n        bool isRevocation,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        ISchemaResolver resolver = schemaRecord.resolver;\\n        if (address(resolver) == address(0)) {\\n            // Ensure that we don't accept payments if there is no resolver.\\n            if (value != 0) {\\n                revert NotPayable();\\n            }\\n\\n            if (last) {\\n                _refund(availableValue);\\n            }\\n\\n            return 0;\\n        }\\n\\n        // Ensure that we don't accept payments which can't be forwarded to the resolver.\\n        if (value != 0) {\\n            if (!resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            if (value > availableValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Ensure to deduct the sent value explicitly.\\n            unchecked {\\n                availableValue -= value;\\n            }\\n        }\\n\\n        if (isRevocation) {\\n            if (!resolver.revoke{ value: value }(attestation)) {\\n                revert InvalidRevocation();\\n            }\\n        } else if (!resolver.attest{ value: value }(attestation)) {\\n            revert InvalidAttestation();\\n        }\\n\\n        if (last) {\\n            _refund(availableValue);\\n        }\\n\\n        return value;\\n    }\\n\\n    /// @dev Resolves multiple attestations or revocations of existing attestations.\\n    /// @param schemaRecord The schema of the attestation.\\n    /// @param attestations The data of the attestations to make/revoke.\\n    /// @param values Explicit ETH amounts to send to the resolver.\\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\\n    /// @param last Whether this is the last attestations/revocations set.\\n    /// @return Returns the total sent ETH amount.\\n    function _resolveAttestations(\\n        SchemaRecord memory schemaRecord,\\n        Attestation[] memory attestations,\\n        uint256[] memory values,\\n        bool isRevocation,\\n        uint256 availableValue,\\n        bool last\\n    ) private returns (uint256) {\\n        uint256 length = attestations.length;\\n        if (length == 1) {\\n            return _resolveAttestation(schemaRecord, attestations[0], values[0], isRevocation, availableValue, last);\\n        }\\n\\n        ISchemaResolver resolver = schemaRecord.resolver;\\n        if (address(resolver) == address(0)) {\\n            // Ensure that we don't accept payments if there is no resolver.\\n            for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n                if (values[i] != 0) {\\n                    revert NotPayable();\\n                }\\n            }\\n\\n            if (last) {\\n                _refund(availableValue);\\n            }\\n\\n            return 0;\\n        }\\n\\n        uint256 totalUsedValue = 0;\\n        bool isResolverPayable = resolver.isPayable();\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            uint256 value = values[i];\\n\\n            // Ensure that we don't accept payments which can't be forwarded to the resolver.\\n            if (value == 0) {\\n                continue;\\n            }\\n\\n            if (!isResolverPayable) {\\n                revert NotPayable();\\n            }\\n\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            if (value > availableValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Ensure to deduct the sent value explicitly and add it to the total used value by the batch.\\n            unchecked {\\n                availableValue -= value;\\n                totalUsedValue += value;\\n            }\\n        }\\n\\n        if (isRevocation) {\\n            if (!resolver.multiRevoke{ value: totalUsedValue }(attestations, values)) {\\n                revert InvalidRevocations();\\n            }\\n        } else if (!resolver.multiAttest{ value: totalUsedValue }(attestations, values)) {\\n            revert InvalidAttestations();\\n        }\\n\\n        if (last) {\\n            _refund(availableValue);\\n        }\\n\\n        return totalUsedValue;\\n    }\\n\\n    /// @dev Calculates a UID for a given attestation.\\n    /// @param attestation The input attestation.\\n    /// @param bump A bump value to use in case of a UID conflict.\\n    /// @return Attestation UID.\\n    function _getUID(Attestation memory attestation, uint32 bump) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.revocable,\\n                    attestation.refUID,\\n                    attestation.data,\\n                    bump\\n                )\\n            );\\n    }\\n\\n    /// @dev Refunds remaining ETH amount to the attester.\\n    /// @param remainingValue The remaining ETH amount that was not sent to the resolver.\\n    function _refund(uint256 remainingValue) private {\\n        if (remainingValue > 0) {\\n            // Using a regular transfer here might revert, for some non-EOA attesters, due to exceeding of the 2300\\n            // gas limit which is why we're using call instead (via sendValue), which the 2300 gas limit does not\\n            // apply for.\\n            payable(msg.sender).sendValue(remainingValue);\\n        }\\n    }\\n\\n    /// @dev Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @param time The timestamp.\\n    function _timestamp(bytes32 data, uint64 time) private {\\n        if (_timestamps[data] != 0) {\\n            revert AlreadyTimestamped();\\n        }\\n\\n        _timestamps[data] = time;\\n\\n        emit Timestamped(data, time);\\n    }\\n\\n    /// @dev Revokes the specified bytes32 data.\\n    /// @param revoker The revoking account.\\n    /// @param data The data to revoke.\\n    /// @param time The timestamp the data was revoked with.\\n    function _revokeOffchain(address revoker, bytes32 data, uint64 time) private {\\n        mapping(bytes32 data => uint64 timestamp) storage revocations = _revocationsOffchain[revoker];\\n\\n        if (revocations[data] != 0) {\\n            revert AlreadyRevokedOffchain();\\n        }\\n\\n        revocations[data] = time;\\n\\n        emit RevokedOffchain(revoker, data, time);\\n    }\\n\\n    /// @dev Merges lists of UIDs.\\n    /// @param uidLists The provided lists of UIDs.\\n    /// @param uidCount Total UID count.\\n    /// @return A merged and flatten list of all the UIDs.\\n    function _mergeUIDs(bytes32[][] memory uidLists, uint256 uidCount) private pure returns (bytes32[] memory) {\\n        bytes32[] memory uids = new bytes32[](uidCount);\\n\\n        uint256 currentIndex = 0;\\n        uint256 uidListLength = uidLists.length;\\n        for (uint256 i = 0; i < uidListLength; i = uncheckedInc(i)) {\\n            bytes32[] memory currentUIDs = uidLists[i];\\n            uint256 currentUIDsLength = currentUIDs.length;\\n            for (uint256 j = 0; j < currentUIDsLength; j = uncheckedInc(j)) {\\n                uids[currentIndex] = currentUIDs[j];\\n\\n                unchecked {\\n                    ++currentIndex;\\n                }\\n            }\\n        }\\n\\n        return uids;\\n    }\\n}\\n\"\n    },\n    \"contracts/eip1271/EIP1271Verifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AttestationRequestData,\\n    DelegatedAttestationRequest,\\n    DelegatedRevocationRequest,\\n    RevocationRequestData\\n} from \\\"../IEAS.sol\\\";\\n\\nimport { DeadlineExpired, NO_EXPIRATION_TIME, Signature, InvalidSignature } from \\\"../Common.sol\\\";\\n\\n/// @title EIP1271Verifier\\n/// @notice EIP1271Verifier typed signatures verifier for EAS delegated attestations.\\nabstract contract EIP1271Verifier is EIP712 {\\n    using Address for address;\\n\\n    error InvalidNonce();\\n\\n    // The hash of the data type used to relay calls to the attest function. It's the value of\\n    // keccak256(\\\"Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)\\\").\\n    bytes32 private constant ATTEST_TYPEHASH = 0xfeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076;\\n\\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\\n    // keccak256(\\\"Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)\\\").\\n    bytes32 private constant REVOKE_TYPEHASH = 0xb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e75;\\n\\n    // The user readable name of the signing domain.\\n    string private _name;\\n\\n    // Replay protection nonces.\\n    mapping(address attester => uint256 nonce) private _nonces;\\n\\n    /// @notice Emitted when users invalidate nonces by increasing their nonces to (higher) new values.\\n    /// @param oldNonce The previous nonce.\\n    /// @param newNonce The new value.\\n    event NonceIncreased(uint256 oldNonce, uint256 newNonce);\\n\\n    /// @dev Creates a new EIP1271Verifier instance.\\n    /// @param version The current major version of the signing domain\\n    constructor(string memory name, string memory version) EIP712(name, version) {\\n        _name = name;\\n    }\\n\\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\\n    /// @return The domain separator used in the encoding of the signatures for attest, and revoke.\\n    function getDomainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// @notice Returns the current nonce per-account.\\n    /// @param account The requested account.\\n    /// @return The current nonce.\\n    function getNonce(address account) external view returns (uint256) {\\n        return _nonces[account];\\n    }\\n\\n    /// @notice Returns the EIP712 type hash for the attest function.\\n    /// @return The EIP712 type hash for the attest function.\\n    function getAttestTypeHash() external pure returns (bytes32) {\\n        return ATTEST_TYPEHASH;\\n    }\\n\\n    /// @notice Returns the EIP712 type hash for the revoke function.\\n    /// @return The EIP712 type hash for the revoke function.\\n    function getRevokeTypeHash() external pure returns (bytes32) {\\n        return REVOKE_TYPEHASH;\\n    }\\n\\n    /// @notice Returns the EIP712 name.\\n    /// @return The EIP712 name.\\n    function getName() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.\\n    /// @param newNonce The (higher) new value.\\n    function increaseNonce(uint256 newNonce) external {\\n        uint256 oldNonce = _nonces[msg.sender];\\n        if (newNonce <= oldNonce) {\\n            revert InvalidNonce();\\n        }\\n\\n        _nonces[msg.sender] = newNonce;\\n\\n        emit NonceIncreased({ oldNonce: oldNonce, newNonce: newNonce });\\n    }\\n\\n    /// @dev Verifies delegated attestation request.\\n    /// @param request The arguments of the delegated attestation request.\\n    function _verifyAttest(DelegatedAttestationRequest memory request) internal {\\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\\n            revert DeadlineExpired();\\n        }\\n\\n        AttestationRequestData memory data = request.data;\\n        Signature memory signature = request.signature;\\n\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ATTEST_TYPEHASH,\\n                    request.attester,\\n                    request.schema,\\n                    data.recipient,\\n                    data.expirationTime,\\n                    data.revocable,\\n                    data.refUID,\\n                    keccak256(data.data),\\n                    data.value,\\n                    _nonces[request.attester]++,\\n                    request.deadline\\n                )\\n            )\\n        );\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                request.attester,\\n                hash,\\n                abi.encodePacked(signature.r, signature.s, signature.v)\\n            )\\n        ) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Verifies delegated revocation request.\\n    /// @param request The arguments of the delegated revocation request.\\n    function _verifyRevoke(DelegatedRevocationRequest memory request) internal {\\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\\n            revert DeadlineExpired();\\n        }\\n\\n        RevocationRequestData memory data = request.data;\\n        Signature memory signature = request.signature;\\n\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    REVOKE_TYPEHASH,\\n                    request.revoker,\\n                    request.schema,\\n                    data.uid,\\n                    data.value,\\n                    _nonces[request.revoker]++,\\n                    request.deadline\\n                )\\n            )\\n        );\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                request.revoker,\\n                hash,\\n                abi.encodePacked(signature.r, signature.s, signature.v)\\n            )\\n        ) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\\n    ///     current block time.\\n    function _time() internal view virtual returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n}\\n\"\n    },\n    \"contracts/eip712/proxy/EIP712Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AccessDenied,\\n    DeadlineExpired,\\n    Signature,\\n    InvalidEAS,\\n    InvalidLength,\\n    InvalidSignature,\\n    NotFound,\\n    NO_EXPIRATION_TIME,\\n    uncheckedInc\\n} from \\\"../../Common.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    AttestationRequest,\\n    AttestationRequestData,\\n    IEAS,\\n    MultiAttestationRequest,\\n    MultiRevocationRequest,\\n    RevocationRequest,\\n    RevocationRequestData\\n} from \\\"../../IEAS.sol\\\";\\n\\nimport { Semver } from \\\"../../Semver.sol\\\";\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedProxyAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedProxyAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedProxyRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedProxyRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title EIP712Proxy\\n/// @notice This utility contract an be used to aggregate delegated attestations without requiring a specific order via\\n///     nonces. The contract doesn't request nonces and implements replay protection by storing ***immalleable***\\n///     signatures.\\ncontract EIP712Proxy is Semver, EIP712 {\\n    error UsedSignature();\\n\\n    // The hash of the data type used to relay calls to the attest function. It's the value of\\n    // keccak256(\\\"Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)\\\").\\n    bytes32 private constant ATTEST_PROXY_TYPEHASH = 0xea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af1;\\n\\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\\n    // keccak256(\\\"Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)\\\").\\n    bytes32 private constant REVOKE_PROXY_TYPEHASH = 0x78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d;\\n\\n    // The global EAS contract.\\n    IEAS private immutable _eas;\\n\\n    // The user readable name of the signing domain.\\n    string private _name;\\n\\n    // The global mapping between proxy attestations and their attesters, so that we can verify that only the original\\n    // attester is able to revert attestations by proxy.\\n    mapping(bytes32 uid => address attester) private _attesters;\\n\\n    // Replay protection signatures.\\n    mapping(bytes signature => bool used) private _signatures;\\n\\n    /// @dev Creates a new EIP1271Verifier instance.\\n    /// @param eas The address of the global EAS contract.\\n    /// @param name The user readable name of the signing domain.\\n    constructor(IEAS eas, string memory name) Semver(1, 4, 0) EIP712(name, \\\"1.4.0\\\") {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n        _name = name;\\n    }\\n\\n    /// @notice Returns the EAS.\\n    function getEAS() external view returns (IEAS) {\\n        return _eas;\\n    }\\n\\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\\n    function getDomainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// Returns the EIP712 type hash for the attest function.\\n    function getAttestTypeHash() external pure returns (bytes32) {\\n        return ATTEST_PROXY_TYPEHASH;\\n    }\\n\\n    /// Returns the EIP712 type hash for the revoke function.\\n    function getRevokeTypeHash() external pure returns (bytes32) {\\n        return REVOKE_PROXY_TYPEHASH;\\n    }\\n\\n    /// Returns the EIP712 name.\\n    function getName() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// Returns the attester for a given uid.\\n    function getAttester(bytes32 uid) external view returns (address) {\\n        return _attesters[uid];\\n    }\\n\\n    /// @notice Attests to a specific schema via the provided EIP712 signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedProxyAttestationRequest calldata delegatedRequest\\n    ) public payable virtual returns (bytes32) {\\n        _verifyAttest(delegatedRequest);\\n\\n        bytes32 uid = _eas.attest{ value: msg.value }(\\n            AttestationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\\n        );\\n\\n        _attesters[uid] = delegatedRequest.attester;\\n\\n        return uid;\\n    }\\n\\n    /// @notice Attests to multiple schemas using via provided EIP712 signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\\n    ) public payable virtual returns (bytes32[] memory) {\\n        uint256 length = multiDelegatedRequests.length;\\n        MultiAttestationRequest[] memory multiRequests = new MultiAttestationRequest[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _verifyAttest(\\n                    DelegatedProxyAttestationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: data[j],\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        attester: multiDelegatedRequest.attester,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            multiRequests[i] = MultiAttestationRequest({ schema: multiDelegatedRequest.schema, data: data });\\n        }\\n\\n        bytes32[] memory uids = _eas.multiAttest{ value: msg.value }(multiRequests);\\n\\n        // Store all attesters, according to the order of the attestation requests.\\n        uint256 uidCounter = 0;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\\n\\n            uint256 dataLength = data.length;\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                _attesters[uids[uidCounter]] = multiDelegatedRequest.attester;\\n\\n                unchecked {\\n                    ++uidCounter;\\n                }\\n            }\\n        }\\n\\n        return uids;\\n    }\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest) public payable virtual {\\n        _verifyRevoke(delegatedRequest);\\n\\n        return\\n            _eas.revoke{ value: msg.value }(\\n                RevocationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\\n            );\\n    }\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\\n    ) public payable virtual {\\n        uint256 length = multiDelegatedRequests.length;\\n        MultiRevocationRequest[] memory multiRequests = new MultiRevocationRequest[](length);\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            MultiDelegatedProxyRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\\n\\n            // Ensure that no inputs are missing.\\n            uint256 dataLength = data.length;\\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\\n                revert InvalidLength();\\n            }\\n\\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\\n                RevocationRequestData memory requestData = data[j];\\n\\n                _verifyRevoke(\\n                    DelegatedProxyRevocationRequest({\\n                        schema: multiDelegatedRequest.schema,\\n                        data: requestData,\\n                        signature: multiDelegatedRequest.signatures[j],\\n                        revoker: multiDelegatedRequest.revoker,\\n                        deadline: multiDelegatedRequest.deadline\\n                    })\\n                );\\n            }\\n\\n            multiRequests[i] = MultiRevocationRequest({ schema: multiDelegatedRequest.schema, data: data });\\n        }\\n\\n        _eas.multiRevoke{ value: msg.value }(multiRequests);\\n    }\\n\\n    /// @dev Verifies delegated attestation request.\\n    /// @param request The arguments of the delegated attestation request.\\n    function _verifyAttest(DelegatedProxyAttestationRequest memory request) internal {\\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\\n            revert DeadlineExpired();\\n        }\\n\\n        AttestationRequestData memory data = request.data;\\n        Signature memory signature = request.signature;\\n\\n        _verifyUnusedSignature(signature);\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ATTEST_PROXY_TYPEHASH,\\n                    request.attester,\\n                    request.schema,\\n                    data.recipient,\\n                    data.expirationTime,\\n                    data.revocable,\\n                    data.refUID,\\n                    keccak256(data.data),\\n                    data.value,\\n                    request.deadline\\n                )\\n            )\\n        );\\n\\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.attester) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Verifies delegated revocation request.\\n    /// @param request The arguments of the delegated revocation request.\\n    function _verifyRevoke(DelegatedProxyRevocationRequest memory request) internal {\\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\\n            revert DeadlineExpired();\\n        }\\n\\n        RevocationRequestData memory data = request.data;\\n\\n        // Allow only original attesters to revoke their attestations.\\n        address attester = _attesters[data.uid];\\n        if (attester == address(0)) {\\n            revert NotFound();\\n        }\\n\\n        if (attester != request.revoker) {\\n            revert AccessDenied();\\n        }\\n\\n        Signature memory signature = request.signature;\\n\\n        _verifyUnusedSignature(signature);\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    REVOKE_PROXY_TYPEHASH,\\n                    request.revoker,\\n                    request.schema,\\n                    data.uid,\\n                    data.value,\\n                    request.deadline\\n                )\\n            )\\n        );\\n\\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.revoker) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /// @dev Ensures that the provided EIP712 signature wasn't already used.\\n    /// @param signature The EIP712 signature data.\\n    function _verifyUnusedSignature(Signature memory signature) internal {\\n        bytes memory packedSignature = abi.encodePacked(signature.v, signature.r, signature.s);\\n\\n        if (_signatures[packedSignature]) {\\n            revert UsedSignature();\\n        }\\n\\n        _signatures[packedSignature] = true;\\n    }\\n\\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\\n    ///     current block time.\\n    function _time() internal view virtual returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n}\\n\"\n    },\n    \"contracts/eip712/proxy/examples/PermissionedEIP712Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    EIP712Proxy,\\n    DelegatedProxyAttestationRequest,\\n    DelegatedProxyRevocationRequest,\\n    MultiDelegatedProxyAttestationRequest,\\n    MultiDelegatedProxyRevocationRequest\\n} from \\\"../EIP712Proxy.sol\\\";\\n\\nimport { IEAS } from \\\"../../../IEAS.sol\\\";\\n\\nimport { AccessDenied, uncheckedInc } from \\\"../../../Common.sol\\\";\\n\\n/// @title PermissionedEIP712Proxy\\n/// @notice A sample EIP712 proxy that allows only a specific address to attest.\\ncontract PermissionedEIP712Proxy is EIP712Proxy, Ownable {\\n    /// @dev Creates a new PermissionedEIP712Proxy instance.\\n    /// @param eas The address of the global EAS contract.\\n    /// @param name The user readable name of the signing domain.\\n    constructor(IEAS eas, string memory name) Ownable(msg.sender) EIP712Proxy(eas, name) {}\\n\\n    /// @inheritdoc EIP712Proxy\\n    function attestByDelegation(\\n        DelegatedProxyAttestationRequest calldata delegatedRequest\\n    ) public payable override returns (bytes32) {\\n        // Ensure that only the owner is allowed to delegate attestations.\\n        _verifyAttester(delegatedRequest.attester);\\n\\n        return super.attestByDelegation(delegatedRequest);\\n    }\\n\\n    /// @inheritdoc EIP712Proxy\\n    function multiAttestByDelegation(\\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\\n    ) public payable override returns (bytes32[] memory) {\\n        uint256 length = multiDelegatedRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that only the owner is allowed to delegate attestations.\\n            _verifyAttester(multiDelegatedRequests[i].attester);\\n        }\\n\\n        return super.multiAttestByDelegation(multiDelegatedRequests);\\n    }\\n\\n    /// @inheritdoc EIP712Proxy\\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest) public payable override {\\n        // Ensure that only the owner is allowed to delegate revocations.\\n        _verifyAttester(delegatedRequest.revoker);\\n\\n        super.revokeByDelegation(delegatedRequest);\\n    }\\n\\n    /// @inheritdoc EIP712Proxy\\n    function multiRevokeByDelegation(\\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\\n    ) public payable override {\\n        uint256 length = multiDelegatedRequests.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that only the owner is allowed to delegate revocations.\\n            _verifyAttester(multiDelegatedRequests[i].revoker);\\n        }\\n\\n        super.multiRevokeByDelegation(multiDelegatedRequests);\\n    }\\n\\n    /// @dev Ensures that only the allowed attester can attest.\\n    /// @param attester The attester to verify.\\n    function _verifyAttester(address attester) private view {\\n        if (attester != owner()) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/IEAS.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID of the new attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\"\n    },\n    \"contracts/Indexer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { IEAS, Attestation } from \\\"./IEAS.sol\\\";\\nimport { EMPTY_UID, uncheckedInc } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\n\\n/// @title Indexer\\n/// @notice Indexing Service for the Ethereum Attestation Service\\ncontract Indexer is Semver {\\n    error InvalidEAS();\\n    error InvalidAttestation();\\n    error InvalidOffset();\\n\\n    /// @notice Emitted when an attestation has been indexed.\\n    /// @param uid The UID the attestation.\\n    event Indexed(bytes32 indexed uid);\\n\\n    /// A mapping between an account and its received attestations.\\n    mapping(address account => mapping(bytes32 => bytes32[] uids) receivedAttestations) private _receivedAttestations;\\n\\n    // A mapping between an account and its sent attestations.\\n    mapping(address account => mapping(bytes32 => bytes32[] uids) sentAttestations) private _sentAttestations;\\n\\n    // A mapping between a schema, attester, and recipient.\\n    mapping(bytes32 schemaUID => mapping(address attester => mapping(address recipient => bytes32[] uids)))\\n        private _schemaAttesterRecipientAttestations;\\n\\n    // A mapping between a schema and its attestations.\\n    mapping(bytes32 schemaUID => bytes32[] uids) private _schemaAttestations;\\n\\n    // The global mapping of attestation indexing status.\\n    mapping(bytes32 attestationUID => bool status) private _indexedAttestations;\\n\\n    // The address of the global EAS contract.\\n    IEAS private immutable _eas;\\n\\n    /// @dev Creates a new Indexer instance.\\n    /// @param eas The address of the global EAS contract.\\n    constructor(IEAS eas) Semver(1, 3, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /// @notice Returns the EAS.\\n    function getEAS() external view returns (IEAS) {\\n        return _eas;\\n    }\\n\\n    /// @notice Indexes an existing attestation.\\n    /// @param attestationUID The UID of the attestation to index.\\n    function indexAttestation(bytes32 attestationUID) external {\\n        _indexAttestation(attestationUID);\\n    }\\n\\n    /// @notice Indexes multiple existing attestations.\\n    /// @param attestationUIDs The UIDs of the attestations to index.\\n    function indexAttestations(bytes32[] calldata attestationUIDs) external {\\n        uint256 length = attestationUIDs.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _indexAttestation(attestationUIDs[i]);\\n        }\\n    }\\n\\n    /// @notice Returns whether an existing attestation has been already indexed.\\n    /// @param attestationUID The UID of the attestation to check.\\n    /// @return Whether an attestation has been already indexed.\\n    function isAttestationIndexed(bytes32 attestationUID) external view returns (bool) {\\n        return _indexedAttestations[attestationUID];\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested to/received by a specific\\n    ///     recipient.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getReceivedAttestationUIDs(\\n        address recipient,\\n        bytes32 schemaUID,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_receivedAttestations[recipient][schemaUID], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema which were attested to/received by a\\n    ///     specific recipient.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param schemaUID The UID of the schema.\\n    /// @return The total number of attestations.\\n    function getReceivedAttestationUIDCount(address recipient, bytes32 schemaUID) external view returns (uint256) {\\n        return _receivedAttestations[recipient][schemaUID].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester.\\n    /// @param attester The attester of the attestation.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSentAttestationUIDs(\\n        address attester,\\n        bytes32 schemaUID,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_sentAttestations[attester][schemaUID], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema which were attested by a specific\\n    /// attester.\\n    /// @param attester The attester of the attestation.\\n    /// @param schemaUID The UID of the schema.\\n    /// @return The total number of attestations.\\n    function getSentAttestationUIDCount(address attester, bytes32 schemaUID) external view returns (uint256) {\\n        return _sentAttestations[attester][schemaUID].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester to a\\n    ///     specific recipient.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param attester The attester of the attestation.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttesterRecipientAttestationUIDs(\\n        bytes32 schemaUID,\\n        address attester,\\n        address recipient,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return\\n            _sliceUIDs(\\n                _schemaAttesterRecipientAttestations[schemaUID][attester][recipient],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /// @notice Returns the total number of UIDs of attestations to a specific schema which were attested by a specific\\n    ///     attester to a specific recipient.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param attester The attester of the attestation.\\n    /// @param recipient The recipient of the attestation.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttesterRecipientAttestationUIDCount(\\n        bytes32 schemaUID,\\n        address attester,\\n        address recipient\\n    ) external view returns (uint256) {\\n        return _schemaAttesterRecipientAttestations[schemaUID][attester][recipient].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttestationUIDs(\\n        bytes32 schemaUID,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_schemaAttestations[schemaUID], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema.\\n    /// @param schemaUID The UID of the schema.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttestationUIDCount(bytes32 schemaUID) external view returns (uint256) {\\n        return _schemaAttestations[schemaUID].length;\\n    }\\n\\n    /// @dev Indexes an existing attestation.\\n    /// @param attestationUID The UID of the attestation to index.\\n    function _indexAttestation(bytes32 attestationUID) private {\\n        // Skip already indexed attestations.\\n        if (_indexedAttestations[attestationUID]) {\\n            return;\\n        }\\n\\n        // Check if the attestation exists.\\n        Attestation memory attestation = _eas.getAttestation(attestationUID);\\n\\n        bytes32 uid = attestation.uid;\\n        if (uid == EMPTY_UID) {\\n            revert InvalidAttestation();\\n        }\\n\\n        // Index the attestation.\\n        address attester = attestation.attester;\\n        address recipient = attestation.recipient;\\n        bytes32 schemaUID = attestation.schema;\\n\\n        _indexedAttestations[attestationUID] = true;\\n        _schemaAttestations[schemaUID].push(attestationUID);\\n        _receivedAttestations[recipient][schemaUID].push(attestationUID);\\n        _sentAttestations[attester][schemaUID].push(attestationUID);\\n        _schemaAttesterRecipientAttestations[schemaUID][attester][recipient].push(attestationUID);\\n\\n        emit Indexed({ uid: uid });\\n    }\\n\\n    /// @dev Returns a slice in an array of attestation UIDs.\\n    /// @param uids The array of attestation UIDs.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function _sliceUIDs(\\n        bytes32[] memory uids,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) private pure returns (bytes32[] memory) {\\n        uint256 attestationsLength = uids.length;\\n        if (attestationsLength == 0) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (start >= attestationsLength) {\\n            revert InvalidOffset();\\n        }\\n\\n        unchecked {\\n            uint256 len = length;\\n            if (attestationsLength < start + length) {\\n                len = attestationsLength - start;\\n            }\\n\\n            bytes32[] memory res = new bytes32[](len);\\n\\n            for (uint256 i = 0; i < len; ++i) {\\n                res[i] = uids[reverseOrder ? attestationsLength - (start + i + 1) : start + i];\\n            }\\n\\n            return res;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/ISchemaRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\"\n    },\n    \"contracts/ISemver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/resolver/examples/AttestationResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title AttestationResolver\\n/// @notice A sample schema resolver that checks whether an attestations attest to an existing attestation with a\\n//  specific data field.\\ncontract AttestationResolver is SchemaResolver {\\n    error OutOfBounds();\\n\\n    bytes32 private constant MAGIC_DATA = \\\"EA5EA5EA5EA5EA5EA5EA5EA5EA5EA5\\\";\\n\\n    constructor(IEAS eas) SchemaResolver(eas) {}\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\\n        bytes32 uid = _toBytes32(attestation.data, 0);\\n        Attestation memory targetAttestation = _eas.getAttestation(uid);\\n\\n        // Make sure that the encoded data is an attestation with the magic data.\\n        return targetAttestation.data.length == MAGIC_DATA.length && bytes32(targetAttestation.data) == MAGIC_DATA;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function toBytes32(bytes memory data, uint256 start) external pure returns (bytes32) {\\n        return _toBytes32(data, start);\\n    }\\n\\n    function _toBytes32(bytes memory data, uint256 start) private pure returns (bytes32) {\\n        unchecked {\\n            if (data.length < start + 32) {\\n                revert OutOfBounds();\\n            }\\n        }\\n\\n        bytes32 tempBytes32;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            tempBytes32 := mload(add(add(data, 0x20), start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/AttesterResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title AttesterResolver\\n/// @notice A sample schema resolver that checks whether the attestation is from a specific attester.\\ncontract AttesterResolver is SchemaResolver {\\n    address private immutable _targetAttester;\\n\\n    constructor(IEAS eas, address targetAttester) SchemaResolver(eas) {\\n        _targetAttester = targetAttester;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\\n        return attestation.attester == _targetAttester;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/DataResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title DataResolver\\n/// @notice A sample schema resolver that checks whether an attestation data is either \\\\x00 or \\\\x01.\\ncontract DataResolver is SchemaResolver {\\n    bytes1 private constant DATA1 = \\\"\\\\x00\\\";\\n    bytes1 private constant DATA2 = \\\"\\\\x01\\\";\\n\\n    constructor(IEAS eas) SchemaResolver(eas) {}\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal pure override returns (bool) {\\n        // Verifies that the data is either 0 or 1.\\n        return attestation.data.length == 1 && (attestation.data[0] == DATA1 || attestation.data[0] == DATA2);\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/ExpirationTimeResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title ExpirationTimeResolver\\n/// @notice A sample schema resolver that checks whether the expiration time is later than a specific timestamp.\\ncontract ExpirationTimeResolver is SchemaResolver {\\n    uint256 private immutable _validAfter;\\n\\n    constructor(IEAS eas, uint256 validAfter) SchemaResolver(eas) {\\n        _validAfter = validAfter;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\\n        return attestation.expirationTime >= _validAfter;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/PayingResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title PayingResolver\\n/// @notice A sample schema resolver that pays attesters (and expects the payment to be returned during revocations).\\ncontract PayingResolver is SchemaResolver {\\n    using Address for address payable;\\n\\n    error InvalidValue();\\n\\n    uint256 private immutable _incentive;\\n\\n    constructor(IEAS eas, uint256 incentive) SchemaResolver(eas) {\\n        _incentive = incentive;\\n    }\\n\\n    function isPayable() public pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 value) internal override returns (bool) {\\n        if (value > 0) {\\n            return false;\\n        }\\n\\n        payable(attestation.attester).transfer(_incentive);\\n\\n        return true;\\n    }\\n\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal override returns (bool) {\\n        if (value < _incentive) {\\n            return false;\\n        }\\n\\n        if (value > _incentive) {\\n            payable(address(attestation.attester)).sendValue(value - _incentive);\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/RecipientResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title RecipientResolver\\n/// @notice A sample schema resolver that checks whether the attestation is to a specific recipient.\\ncontract RecipientResolver is SchemaResolver {\\n    address private immutable _targetRecipient;\\n\\n    constructor(IEAS eas, address targetRecipient) SchemaResolver(eas) {\\n        _targetRecipient = targetRecipient;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\\n        return attestation.recipient == _targetRecipient;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/RevocationResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title RevocationResolver\\n/// @notice A sample schema resolver that controls revocations.\\ncontract RevocationResolver is SchemaResolver {\\n    bool private _revocation;\\n\\n    constructor(IEAS eas) SchemaResolver(eas) {}\\n\\n    function setRevocation(bool status) external {\\n        _revocation = status;\\n    }\\n\\n    function onAttest(Attestation calldata /*attestation)*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal view override returns (bool) {\\n        return _revocation;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/TokenResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title TokenResolver\\n/// @notice A sample schema resolver that checks whether a specific amount of tokens was approved to be included in an attestation.\\ncontract TokenResolver is SchemaResolver {\\n    using SafeERC20 for IERC20;\\n\\n    error InvalidAllowance();\\n\\n    IERC20 private immutable _targetToken;\\n    uint256 private immutable _targetAmount;\\n\\n    constructor(IEAS eas, IERC20 targetToken, uint256 targetAmount) SchemaResolver(eas) {\\n        _targetToken = targetToken;\\n        _targetAmount = targetAmount;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\\n        if (_targetToken.allowance(attestation.attester, address(this)) < _targetAmount) {\\n            revert InvalidAllowance();\\n        }\\n\\n        return true;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/examples/ValueResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../../IEAS.sol\\\";\\n\\n/// @title ValueResolver\\n/// @notice A sample schema resolver that checks whether a specific amount of ETH was sent with an attestation.\\ncontract ValueResolver is SchemaResolver {\\n    uint256 private immutable _targetValue;\\n\\n    constructor(IEAS eas, uint256 targetValue) SchemaResolver(eas) {\\n        _targetValue = targetValue;\\n    }\\n\\n    function isPayable() public pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function onAttest(Attestation calldata /*attestation*/, uint256 value) internal view override returns (bool) {\\n        return value == _targetValue;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/resolver/ISchemaResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\"\n    },\n    \"contracts/resolver/SchemaResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { AccessDenied, InvalidEAS, InvalidLength, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @title SchemaResolver\\n/// @notice The base schema resolver contract.\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /// @dev Creates a new resolver.\\n    /// @param eas The address of the global EAS contract.\\n    constructor(IEAS eas) Semver(1, 3, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /// @dev Ensures that only the EAS contract can make this call.\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev ETH callback.\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param attestation The new attestation.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n    ///     both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation is valid.\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n    ///     both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @dev Ensures that only the EAS contract can make this call.\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/SchemaRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\nimport { EMPTY_UID } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\nimport { ISchemaRegistry, SchemaRecord } from \\\"./ISchemaRegistry.sol\\\";\\n\\n/// @title SchemaRegistry\\n/// @notice The global schema registry.\\ncontract SchemaRegistry is ISchemaRegistry, Semver {\\n    error AlreadyExists();\\n\\n    // The global mapping between schema records and their IDs.\\n    mapping(bytes32 uid => SchemaRecord schemaRecord) private _registry;\\n\\n    /// @dev Creates a new SchemaRegistry instance.\\n    constructor() Semver(1, 3, 0) {}\\n\\n    /// @inheritdoc ISchemaRegistry\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32) {\\n        SchemaRecord memory schemaRecord = SchemaRecord({\\n            uid: EMPTY_UID,\\n            schema: schema,\\n            resolver: resolver,\\n            revocable: revocable\\n        });\\n\\n        bytes32 uid = _getUID(schemaRecord);\\n        if (_registry[uid].uid != EMPTY_UID) {\\n            revert AlreadyExists();\\n        }\\n\\n        schemaRecord.uid = uid;\\n        _registry[uid] = schemaRecord;\\n\\n        emit Registered(uid, msg.sender, schemaRecord);\\n\\n        return uid;\\n    }\\n\\n    /// @inheritdoc ISchemaRegistry\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory) {\\n        return _registry[uid];\\n    }\\n\\n    /// @dev Calculates a UID for a given schema.\\n    /// @param schemaRecord The input schema.\\n    /// @return schema UID.\\n    function _getUID(SchemaRecord memory schemaRecord) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(schemaRecord.schema, schemaRecord.resolver, schemaRecord.revocable));\\n    }\\n}\\n\"\n    },\n    \"contracts/Semver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver is ISemver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _patch;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _patch = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_patch))\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/eip1271/TestEIP1271Signer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { IERC1271 } from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\ncontract TestEIP1271Signer is IERC1271 {\\n    bytes4 private constant EIP1271_INVALID_MAGIC_VALUE = 0xffffffff;\\n\\n    mapping(bytes32 hash => bytes signature) private _validSignatures;\\n\\n    function mockSignature(bytes32 hash, bytes calldata signature) external {\\n        _validSignatures[hash] = signature;\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue) {\\n        bytes memory storedSignature = _validSignatures[hash];\\n        if (storedSignature.length == signature.length && keccak256(storedSignature) == keccak256(signature)) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return EIP1271_INVALID_MAGIC_VALUE;\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/eip1271/TestEIP1271Verifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { EIP1271Verifier } from \\\"../../eip1271/EIP1271Verifier.sol\\\";\\nimport { DelegatedAttestationRequest, DelegatedRevocationRequest } from \\\"../../IEAS.sol\\\";\\nimport { Semver } from \\\"../../Semver.sol\\\";\\n\\ncontract TestEIP1271Verifier is Semver, EIP1271Verifier {\\n    constructor(string memory name) Semver(1, 3, 0) EIP1271Verifier(name, \\\"1.3.0\\\") {}\\n\\n    function verifyAttest(DelegatedAttestationRequest memory request) external {\\n        _verifyAttest(request);\\n    }\\n\\n    function verifyRevoke(DelegatedRevocationRequest memory request) external {\\n        _verifyRevoke(request);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/eip712/proxy/TestEIP712Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { IEAS } from \\\"../../../IEAS.sol\\\";\\nimport { EIP712Proxy, DelegatedProxyAttestationRequest, DelegatedProxyRevocationRequest } from \\\"../../../eip712/proxy/EIP712Proxy.sol\\\";\\n\\ncontract TestEIP712Proxy is EIP712Proxy {\\n    constructor(IEAS eas, string memory name) EIP712Proxy(eas, name) {}\\n\\n    function verifyAttest(DelegatedProxyAttestationRequest memory request) external {\\n        _verifyAttest(request);\\n    }\\n\\n    function verifyRevoke(DelegatedProxyRevocationRequest memory request) external {\\n        _verifyRevoke(request);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/TestEAS.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { EAS } from \\\"../EAS.sol\\\";\\n\\nimport { ISchemaRegistry } from \\\"../ISchemaRegistry.sol\\\";\\n\\ncontract TestEAS is EAS {\\n    uint64 private constant INITIAL_TIME = 0;\\n\\n    uint64 private _currentTime = INITIAL_TIME;\\n\\n    constructor(ISchemaRegistry registry) EAS(registry) {}\\n\\n    function setTime(uint64 newTime) external {\\n        _currentTime = newTime;\\n    }\\n\\n    function getTime() external view returns (uint64) {\\n        return _time();\\n    }\\n\\n    function _time() internal view override returns (uint64) {\\n        return _currentTime == INITIAL_TIME ? super._time() : _currentTime;\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/TestERC20Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestERC20Token is ERC20 {\\n    constructor(string memory name, string memory symbol, uint256 totalSupply) ERC20(name, symbol) {\\n        _mint(msg.sender, totalSupply);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/TestSchemaResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport { SchemaResolver } from \\\"../resolver/SchemaResolver.sol\\\";\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\n\\ncontract TestSchemaResolver is SchemaResolver {\\n    constructor(IEAS eas) SchemaResolver(eas) {}\\n\\n    function onAttest(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000000\n    },\n    \"evmVersion\": \"paris\",\n    \"metadata\": {\n      \"bytecodeHash\": \"none\",\n      \"useLiteralContent\": true\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    }\n  }\n}",
      "solcInputHash": "c46f6e97062bdc36c0b86a98001fa4c4",
      "transactionHash": "0xf69fe6f90c15fe868e3392e9d18c99f8f4acf78cd3dff7651c09d326b162f8ab",
      "args": []
    },
    "decoded": {
      "from": "0xe269688F24e1C7487f649fC3dCD99A4Bf15bDaA1",
      "maxFeePerGas": "1500000002",
      "maxPriorityFeePerGas": "1500000000",
      "gasLimit": "641922",
      "to": null,
      "value": "0",
      "nonce": 3,
      "data": "0x60e0604052348015600f57600080fd5b506001608052600360a052600060c05260805160a05160c051610ab561004b600039600060fe0152600060d50152600060ac0152610ab56000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b6100776100723660046106b2565b610148565b60405190815260200161005b565b610098610093366004610760565b61030c565b60405161005b9190610779565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107d2565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af908261093a565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610779565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610898565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610898565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610869565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a53565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b803580151581146106ad57600080fd5b919050565b600080600080606085870312156106c857600080fd5b843567ffffffffffffffff8111156106df57600080fd5b8501601f810187136106f057600080fd5b803567ffffffffffffffff81111561070757600080fd5b87602082840101111561071957600080fd5b60209182019550935085013573ffffffffffffffffffffffffffffffffffffffff8116811461074757600080fd5b91506107556040860161069d565b905092959194509250565b60006020828403121561077257600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107ca60a0840182610639565b949350505050565b600084516107e4818460208901610615565b7f2e00000000000000000000000000000000000000000000000000000000000000908301908152845161081e816001840160208901610615565b7f2e0000000000000000000000000000000000000000000000000000000000000060019290910191820152835161085c816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c908216806108ac57607f821691505b6020821081036108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561093557806000526020600020601f840160051c810160208510156109125750805b601f840160051c820191505b81811015610932576000815560010161091e565b50505b505050565b815167ffffffffffffffff81111561095457610954610869565b610968816109628454610898565b846108eb565b6020601f8211600181146109ba57600083156109845750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455610932565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015610a0857878501518255602094850194600190920191016109e8565b5084821015610a4457868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60008451610a65818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c634300081a000a",
      "r": "0xa4a295ab7037a2cdcf31b4bcb573a033a440fc00a4e140207a3c923efc9fc6a6",
      "s": "0x28513076c599360362d70973692817877050de85404ce269f5437409fe864efd",
      "v": 0,
      "chainId": 8453
    }
  }
}